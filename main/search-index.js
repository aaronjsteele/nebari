var searchIndex = JSON.parse('{\
"benchmarks":{"doc":"This page has been left intentionally blank.","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"nebari":{"doc":"Transactional append-only B-Tree storage for <code>BonsaiDb</code>.","tn":["AbortError","Buffer","ChunkCache","CompareAndSwapError","Config","Conflict","Context","DataIntegrity","Error","Error","ErrorKind","ExecutingTransaction","Internal","InvalidTreeName","Io","KeyTooLarge","KeysNotOrdered","Message","Nebari","Other","Roots","ThreadPool","TransactionTree","Tree","TreeCompacted","ValueTooLarge","Vault","as_slice","backtrace","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cache","cache","cache","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","commit","compact","compare_and_swap","compare_and_swap","context","count","current_sequence_id","decrypt","default","default","delete_tree","deref","drop","encrypt","entry","entry_mut","eq","file_manager","file_manager","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get","get","get","get_multiple","get_multiple","get_range","get_range","infallible","insert","into","into","into","into","into","into","into","into","into","into","into","into","into","io","kind","last","last","last_key","last_key","minimum","name","new","new","open","partial_cmp","path","path","read","read_bytes","remove","remove","replace","replace_with_decoded","scan","scan","scan_sequences","set","set","shared_thread_pool","source","source","source","source","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","transaction","transaction","transactions","tree","tree","tree","tree_names","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vault","vault","vault","File","FileHandle","FileManager","FileOp","ManagedFile","Manager","OpenableFile","Output","PathIds","RecreatedFile","append","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","close","close","close_handles","default","delete","delete_directory","execute","execute","exists","file_length","fmt","from","from","fs","id","id","into","into","length","memory","new_id","open_for_append","open_for_read","path","previous_id","read","replace_with","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","OpenStdFile","StdFile","StdFileManager","append","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","close","close","close_handles","default","delete","delete_directory","drop","execute","flush","fmt","fmt","fmt","from","from","from","id","id","into","into","into","length","open_for_append","open_for_read","path","read","read","replace_with","seek","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write","MemoryFile","MemoryFileManager","OpenMemoryFile","append","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","close","close","close_handles","default","delete","delete_directory","execute","exists","file_length","flush","fmt","fmt","fmt","from","from","from","id","id","into","into","into","length","open_for_append","open_for_read","path","read","read","replace_with","seek","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write","LogEntry","State","TransactionHandle","TransactionLog","TransactionManager","TreeLock","TreeLockHandle","TreeLocks","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","close","current_transaction_id","current_transaction_id","data","deref","deref","deref_mut","drop","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_path","get","id","initialize_state","into","into","into","into","into","into","into","into_owned","is_empty","len","ne","new_transaction","new_transaction","next_transaction_id","open","path","push","push","read","scan","scan","set_data","spawn","state","state","to_owned","to_owned","total_size","transaction_position","transaction_was_successful","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","ActiveState","BTreeEntry","BTreeNode","ByIdStats","BySequenceIndex","BySequenceStats","CompareSwap","CompareSwap","CompareSwapFn","Continuation","Data","HEADER","HEADER","Index","Interior","Interior","KeyEntry","KeyEvaluation","KeyOperation","KeyRange","KeySequence","Leaf","Loaded","Modification","OnDisk","Operation","PAGE_SIZE","PageHeader","PagedWriter","Pointer","ReadData","Reducer","Remove","Remove","Root","Set","Set","SetEach","Skip","Skip","State","Stop","TransactableCompaction","TreeFile","TreeRoot","Uninitialized","UnversionedByIdIndex","UnversionedHeader","UnversionedTreeRoot","ValueIndex","VersionedByIdIndex","VersionedHeader","VersionedTreeRoot","alive_keys","begin_transaction","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","by_id_root","by_id_root","by_sequence_root","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","commit","compact","compare_and_swap","copy_data_to","copy_data_to","copy_data_to","count","count","count","current_position","default","default","default","default","default","default_state","deleted_keys","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","dirty","dirty","dirty","dirty","eq","file_id","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get","get","get_multiple","get_multiple","get_multiple","get_multiple","get_mut","get_range","index","initialize_default","initialize_default","initialize_default","initialize_state","initialized","initialized","initialized","initialized","initialized","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","key","key","key","key","key_count","key_count","key_count","key_count","keys","last","last_key","last_sequence","last_sequence","load","manager","map_loaded_entry","max_key","max_order","modify","modify","modify","modify","name","name","new","new","new","next","node","operation","position","position","position","position","position","position","position","position","position","push","read","read","reduce","reduce","reduce","reduce","remove","replace","rereduce","rereduce","rereduce","rereduce","root","scan","scan","scan","scan","scan_sequences","sequence","sequence","sequence_id","serialize","serialize","serialize","state","stats","stats","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","total_indexed_bytes","total_keys","total_sequences","transaction_id","transaction_id","transaction_id","transaction_id","transaction_id","transaction_id","tree","tree","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value_length","value_length","value_length","write","entry","previous_location"],"q":["nebarinebari::io","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nebari::io::fs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nebari::io::memory","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nebari::transaction","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nebari::treenebari::tree::Pointer",""],"d":["An error that could come from user code or Nebari.","A wrapper around a <code>Cow<\'a, [u8]></code> wrapper that implements …","A configurable cache that operates at the “chunk” …","An error returned from <code>compare_and_swap()</code>.","A database configuration used to open a database.","The stored value did not match the conditional value.","A shared environment for database operations.","An unrecoverable data integrity error was encountered.","An error from Nebari as well as an associated backtrace.","Another error occurred while executing the operation.","An error from Nebari.","An executing transaction. While this exists, no other …","An internal error occurred. These errors are not intended …","An invalid tree name was provided.","An error occurred while performing IO.","A key was too large.","A multi-key operation did not have its keys ordered.","An error has occurred. The string contains human-readable …","An error from Roots occurred.","An error unrelated to Nebari occurred.","A multi-tree transactional B-Tree database.","A thread pool that commits transactions to disk in …","A tree that is modifiable during a transaction.","A named collection of keys and values.","The underlying tree file has been compacted, and the …","A value was too large.","A provider of encryption for blocks of data.","Returns this buffer as a slice.","Where the error occurred.","","","","","","","","","","","","","","","","","","","","","","","","","","","Sets the chunk cache to use for this database.","Returns the context’s chunk cache.","The optional chunk cache to use.","","","","","","","","","","","","","","Commits the transaction. Once this function has returned, …","Rewrites the database to remove data that is no longer …","Compares the value of <code>key</code> against <code>old</code>. If the values …","Compares the value of <code>key</code> against <code>old</code>. If the values …","Returns the vault used to encrypt this database.","Returns the number of keys stored in the tree. Does not …","Returns the latest sequence id.","Decrypts a previously encrypted <code>payload</code>, returning the …","","","Removes a tree. Returns true if a tree was deleted.","","","Encrypts <code>payload</code>, returning a new buffer that contains …","Returns the <code>LogEntry</code> for this transaction.","Returns a mutable reference to the <code>LogEntry</code> for this …","","Sets the file manager.","The file manager for the <code>ManagedFile</code> implementor.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the current value of <code>key</code>. This will return …","Retrieves the current value of <code>key</code>, if present. Does not …","Looks up a previously read chunk for <code>file_path</code> at <code>position</code>…","Retrieves the values of <code>keys</code>. If any keys are not found, …","Retrieves the values of <code>keys</code>. If any keys are not found, …","Retrieves all of the values of keys within <code>range</code>.","Retrieves all of the values of keys within <code>range</code>.","Unwraps the error contained within an infallible abort …","Adds a new cached chunk for <code>file_path</code> at <code>position</code>.","","","","","","","","","","","","","","IO abstractions for Nebari.","The error that occurred.","Returns the last key and value of the tree.","Returns the last key and value of the tree.","Returns the last  of the tree.","Returns the last key of the tree.","","Returns the name of the tree.","Creates a new config to open a database located at <code>path</code>.","Create a new cache with a maximum number of entries (…","Opens the database, or creates one if the target path …","","Returns the path to the file for this tree.","Returns the path to the database directory.","","Reads <code>count</code> bytes from the front of the buffer, returning …","Removes <code>key</code> and returns the existing value, if present.","Removes <code>key</code> and returns the existing value, if present. …","Sets <code>key</code> to <code>value</code>. If a value already exists, it will be …","Adds a new cached chunk for <code>file_path</code> at <code>position</code>.","Scans the tree. Each key that is contained <code>range</code> will be …","Scans the tree. Each key that is contained <code>range</code> will be …","Scans the tree for keys that are contained within <code>range</code>. …","Sets <code>key</code> to <code>value</code>.","Sets <code>key</code> to <code>value</code>. This is executed within its own …","Uses the <code>thread_pool</code> provided instead of creating its …","","","","","","","","","Converts this buffer into its slice and returns a …","","","","","","","ACID-compliant transaction log and manager.","Begins a transaction over <code>trees</code>. All trees will be …","Returns the transaction manager for this database.","Append-only B-Tree implementation","Accesses a locked tree.","Opens a tree named <code>name</code>.","Returns a list of all the names of trees contained in …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sets the vault to use for this database.","Returns the vault as a dynamic reference.","The optional vault in use.","The <code>ManagedFile</code> that this manager is for.","A file handle type, which can have operations executed …","A manager that is responsible for controlling write …","An operation to perform on a file.","A file that can be interacted with using async operations.","The file manager that synchronizes file access across …","A file that can have operations performed on it.","The output type of the operation.","Converts between paths and unique IDs.","A file that has had its contents replaced. While this …","Returns a file handle that can be used to read and write.","","","","","","","Safely closes the file after flushing any pending …","Closes the file. This may not actually close the …","Closes all open handles for <code>path</code>, and calls …","","Check if the file exists.","Removes a directory and all of its contents.","Executes an operation.","Executes the operation and returns the result.","Check if the file exists.","Returns the length of the file.","","","","Filesystem IO provided by <code>std::fs</code>.","Returns the unique ID of this file. Only unique within …","Returns the id of the file assigned from the file manager.","","","Returns the length of the file.","A virtual memory-based filesystem.","The file’s new id.","Opens or creates a file at <code>path</code>, positioning the cursor …","Opens a file at <code>path</code> with read-only permission.","Returns the path to the file.","The file’s previous id.","Returns a file handle that can be used for reading …","Replaces the current file with the file located at <code>path</code> …","","","","","","","","An open <code>StdFile</code> that belongs to a <code>StdFileManager</code>.","An open file that uses <code>std::fs</code>.","The <code>FileManager</code> for <code>StdFile</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A fake “file” represented by an in-memory buffer. …","The <code>FileManager</code> implementation for <code>MemoryFile</code>. Simulates a…","An open <code>MemoryFile</code> that is owned by a <code>MemoryFileManager</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An entry in a transaction log.","The transaction log state.","A handle to an executing transaction.","A transaction log that records changes for one or more …","A shared <code>TransactionLog</code> manager. Allows multiple threads …","An acquirable lock for a tree.","A handle to a lock. Upon dropping, the lock will be …","A collection of handles that keep trees locked.","","","","","","","","","","","","","","","","","","","Closes the transaction log.","Returns the current transaction id.","Returns the last successfully written transaction id, or …","Returns the associated data, if any.","","","","","","","","","","","","","","","","","","Creates a new uninitialized state for a transaction log …","Returns the executed transaction with the id provided. …","The unique id of this entry.","Initializes <code>state</code> to contain the information about the …","","","","","","","","Convert this entry into a <code>\'static</code> lifetime.","Returns if the log is empty.","Returns the current length of the log.","","Begins a new transaction, exclusively locking <code>trees</code>.","Creates a new transaction, exclusively locking <code>trees</code>. …","Returns the next transaction id that will be used.","Opens a transaction log for writing.","Returns the path to the file.","Logs one or more transactions. After this call returns, …","Push <code>transaction</code> to the log. Once this function returns, …","Opens a transaction log for reading.","Logs one or more transactions. After this call returns, …","Scans the transaction log for entries with ids within …","Sets the associated data that will be stored in the …","Spawns a new transaction manager. The transaction manager …","Returns the current state of the log.","Returns the current state of the transaction log.","","","Returns the total size of the transaction log file.","Returns the location on disk of the transaction, if found.","Returns true if the transaction id was recorded in the …","","","","","","","","","","","","","","","","","","","","","","An active state for a tree file.","A B-Tree entry that stores a list of key-<code>Index</code> pairs.","A B-Tree entry that stores a list of key-<code>Index</code> pairs.","The reduced index of both <code>VersionedByIdIndex</code> and …","The index stored within …","The reduced index of <code>BySequenceIndex</code>.","A wrapper for a <code>CompareSwapFn</code>.","Executes the <code>CompareSwap</code>. The original value (or <code>None</code> if …","A function that is allowed to check the current value of …","A page that continues data from a previous page.","A page that contains only chunks, no headers.","The unique header byte for this root.","The unique header byte for this root.","The primary index type contained within this root.","An interior B-Tree node. Does not contain values …","An interior node that contains pointers to other nodes.","An entry for a key. Stores a single index value for a …","The result of evaluating a key that was scanned.","An operation to perform on a key.","One or more keys.","A stored revision of a key.","An inline value. Overall, the B-Tree entry is a key-value …","An in-memory node that may have previously been saved …","A tree modification.","The position on-disk of the node.","An operation that is performed on a set of keys.","The number of bytes in each page on-disk.","The header byte for a tree file’s page.","Writes data in pages, allowing for quick scanning through …","A pointer to a location on-disk. May also contain the …","Read the data for this key.","Reduces one or more <code>Index</code>es or instances of <code>Self</code> into a …","Removes the keys.","Remove the key.","A B-Tree root implementation.","Sets all keys to the value.","Set the key to the new value.","Sets each key to the corresponding entry in this value. …","Do not alter the key.","Skip this key.","The current state of a tree file. Must be initialized …","Stop scanning keys.","A compaction process that runs in concert with a …","An append-only tree file.","A named tree root.","An uninitialized node. Only used temporarily during …","The index stored within <code>UnversionedTreeRoot::by_id_root</code>.","An <code>UnversionedTreeRoot</code> header.","A versioned B-Tree root. This tree root internally uses …","An index that serializes a value to the file.","The index stored within <code>VersionedTreeRoot::by_id_root</code>.","A <code>VersionedTreeRoot</code> header.","A versioned B-Tree root. This tree root internally uses …","The number of keys that have values stored within them.","Begins a transaction.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The by-id B-Tree.","The by-id B-Tree.","The by-sequence B-Tree.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Commits the tree. This is only needed if writes were done …","Rewrites the database, removing all unused data in the …","Compares the value of <code>key</code> against <code>old</code>. If the values …","Copies all data from <code>file</code> into <code>writer</code>, updating <code>self</code> with …","","","Returns the number of values contained in this tree, not …","","","The current location within the file for data to be …","","","","","","Returns the default state for this root.","The number of keys that no longer have values stored …","","","","","","","Deserializes the root from <code>bytes</code>.","","","Returns true if the root needs to be saved.","","","Whether the node contains unsaved changes.","","The current file id associated with this tree file. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the previously-<code>load()</code>ed entry.","Gets the value stored for <code>key</code>.","Iterates over the tree looking for <code>keys</code>. <code>keys</code> must be …","","","Gets the values stored in <code>keys</code>. Does not error if a key …","Returns the previously-<code>load()</code>ed entry as a mutable …","Retrieves all keys and values with keys that are …","The index value of this entry.","Resets the state to the default, initialized state. After …","","","Attempts to load the last saved state of this tree into …","Returns true if the tree is initialized.","Returns an initialized state. This should only be used if …","Returns true if the state has been initialized.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The key associated with this sequence id.","The key with the highest sort value within.","The key of this entry.","The key that this entry was written for.","Returns the number of keys that this index and its …","","","","The keys to operate upon.","Returns the last key and value of the tree.","Returns the last key of the tree.","The previous sequence of this key.","The previous sequence id for this key, if any.","Attempts to load the node from disk. If the node is …","The transaction manager.","Loads the pointed at node, if necessary, and invokes …","Returns the highest-ordered key contained in this node.","The maximum “order” of the B-Tree. This controls the …","Modifies the tree.","","","Executes a modification.","Returns the name of the tree.","The name of the tree being compacted.","Returns a new wrapped callback.","Returns an uninitialized state.","Returns a tree as contained in <code>file</code>.","","The B-Tree node.","The operation to perform on the keys.","The position on-disk of the stored value.","","","","Returns the position on-disk of the node being pointed …","The position of the value on disk.","The position of the value on disk.","The position of the value on disk.","The location of the node.","Pushes a key/value pair. Replaces any previous value if …","Reads the current state. Holding onto the returned value …","Opens a tree file with read-only permissions.","Reduces one or more indexes into a single reduced index.","","","","Removes <code>key</code> and returns the existing value, if present.","Sets <code>key</code> to <code>value</code>. If a value already exists, it will be …","Reduces one or more previously-reduced indexes into a …","","","","The root of the B-Tree.","Scans the tree over <code>range</code>. <code>args.key_evaluator</code> is invoked …","","","Scans the tree for keys that are contained within <code>range</code>. …","Scans the tree for keys that are contained within <code>range</code>. …","The last sequence ID inside of this root.","The unique sequence id.","The unique sequence id generated when writing the value …","Serialize the root and return the bytes. Writes any …","","","The state of the file.","Returns the collected statistics for this node.","The reduced statistics.","","","","","","","","","","","","","","","","The total number of bytes stored on disk associated with …","Returns the total number of keys regardless of whether …","The total number of sequence entries.","Returns the current transaction id.","","","The transaction ID to store with this change.","The transaction ID of the tree root. If this transaction …","The transaction ID of the tree root. If this transaction …","Returns a reference to a named tree that contains this …","Returns a reference to a named tree that contains this …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The size of the value stored on disk.","The size of the value stored on disk.","The size of the value stored on disk.","Opens a tree file with the ability to read and write.","The loaded B-Tree entry.","The position on-disk of the node, if it was previously …"],"i":[0,0,0,0,0,1,0,2,0,1,0,0,2,2,2,2,2,2,3,3,0,0,0,0,2,2,0,4,5,6,7,8,5,2,9,1,10,3,11,4,12,13,6,7,8,5,2,9,1,10,3,11,4,12,13,10,13,13,8,9,11,4,12,13,8,9,11,4,12,13,4,6,8,7,8,9,8,7,14,11,4,9,4,6,14,6,6,4,10,13,5,5,2,2,9,1,1,10,3,3,11,4,12,13,6,7,8,5,5,5,5,5,5,5,5,2,2,2,2,2,2,9,1,1,10,3,3,11,4,4,4,4,4,4,4,4,12,13,7,8,12,7,8,7,8,3,12,6,7,8,5,2,9,1,10,3,11,4,12,13,0,5,7,8,7,8,4,8,10,12,10,4,8,9,4,4,7,8,7,12,7,8,8,7,8,10,5,2,1,3,8,9,11,4,4,12,13,5,2,1,3,0,9,9,0,6,9,9,6,7,8,5,2,9,1,10,3,11,4,12,13,6,7,8,5,2,9,1,10,3,11,4,12,13,6,7,8,5,2,9,1,10,3,11,4,12,13,10,13,13,15,15,0,0,0,16,0,17,0,0,15,18,19,18,19,19,19,16,20,15,19,15,15,20,17,15,15,19,18,19,0,16,20,18,19,16,0,18,16,16,16,18,15,20,19,18,19,18,19,18,19,0,0,0,21,22,21,23,22,21,23,21,21,22,23,21,21,21,21,23,23,22,22,21,23,22,21,23,22,23,22,21,23,22,22,22,22,22,21,23,22,21,22,21,23,22,21,23,22,21,23,22,0,0,0,24,25,24,26,25,24,26,24,24,25,26,24,24,24,24,26,24,24,25,25,24,26,25,24,26,25,26,25,24,26,25,25,25,25,25,24,26,25,24,25,24,26,25,24,26,25,24,26,25,0,0,0,0,0,0,0,0,27,28,29,30,31,32,33,27,28,29,30,31,32,33,30,33,30,33,27,27,33,29,28,30,28,32,29,29,30,31,32,33,27,28,29,30,31,32,33,33,27,29,27,27,28,29,30,31,32,33,29,33,33,29,27,33,33,27,33,27,30,27,27,30,29,30,27,30,30,33,27,30,30,27,28,29,30,31,32,33,27,28,29,30,31,32,33,27,28,29,30,31,32,33,0,0,0,0,0,0,0,34,0,35,35,36,36,36,0,37,0,0,0,0,0,37,38,0,38,0,0,0,0,0,39,0,34,40,0,34,40,34,40,39,0,39,0,0,0,37,0,35,0,0,0,35,0,41,42,34,43,42,44,45,46,37,40,47,48,41,49,50,51,38,52,53,54,55,56,57,58,35,59,60,39,34,43,42,44,45,46,37,40,47,48,41,49,50,51,38,52,53,54,55,56,57,58,35,59,60,39,56,57,57,46,37,47,48,41,49,50,51,38,52,54,55,56,57,39,46,37,47,48,41,49,50,51,38,52,54,55,56,57,39,59,59,59,36,56,57,36,56,57,55,46,54,55,56,57,42,41,43,45,59,43,45,59,36,56,57,36,56,57,46,35,55,34,43,46,37,40,47,48,41,49,50,51,38,52,53,54,55,56,57,58,59,60,34,43,42,44,45,46,46,37,40,47,48,41,49,50,51,51,38,52,53,54,55,56,57,58,35,59,60,39,38,59,36,56,57,59,38,59,52,36,56,57,59,36,54,55,56,57,34,43,42,44,45,46,37,40,47,48,41,49,50,51,38,52,53,54,55,56,57,58,35,59,60,39,60,49,51,52,58,61,41,41,50,53,59,59,49,58,38,44,38,46,55,36,56,57,59,42,44,43,54,59,60,46,53,62,47,48,49,38,47,48,49,51,59,54,59,61,41,41,50,59,59,61,41,41,50,55,36,56,57,59,59,57,58,47,36,56,57,59,46,51,46,37,47,48,41,49,50,51,38,52,54,55,56,57,39,41,41,50,36,56,57,53,56,57,36,36,34,43,42,44,45,46,37,40,47,48,41,49,50,51,38,52,53,54,55,56,57,58,35,35,59,60,39,34,43,42,44,45,46,37,40,47,48,41,49,50,51,38,52,53,54,55,56,57,58,35,59,60,39,34,43,42,44,45,46,37,40,47,48,41,49,50,51,38,52,53,54,55,56,57,58,35,59,60,39,47,48,49,59,63,63],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["chunkcache",3]]],[[],[["chunkcache",3],["option",4,["chunkcache"]]]],null,[[]],[[]],[[]],[[],["buffer",3]],[[],["chunkcache",3]],[[],["context",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["ordering",4]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[["buffer",3],["buffer",3],["option",4,["buffer"]],["option",4,["buffer"]]],[["compareandswaperror",4],["result",4,["compareandswaperror"]]]],[[["buffer",3],["buffer",3],["option",4,["buffer"]],["option",4,["buffer"]]],[["compareandswaperror",4],["result",4,["compareandswaperror"]]]],[[],["context",3]],[[],["u64",15]],[[],["u64",15]],[[],[["vec",3,["u8"]],["u8",15]]],[[]],[[]],[[],[["error",3],["result",4,["bool","error"]],["bool",15]]],[[]],[[]],[[],[["vec",3,["u8"]],["u8",15]]],[[],["logentry",3]],[[],["logentry",3]],[[["buffer",3]],["bool",15]],[[]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["senderror",3]]],[[["recverror",4]]],[[]],[[["string",3]]],[[["errorkind",4]]],[[["str",15]]],[[["error",3]]],[[["aborterror",4,["infallible"]],["infallible",4]]],[[["error",3]]],[[]],[[["str",15]]],[[["recverror",4]]],[[["senderror",3]]],[[["string",3]]],[[]],[[]],[[["error",3]]],[[]],[[]],[[["error",3]]],[[]],[[]],[[["cow",4]]],[[["vec",3,["u8"]],["u8",15]]],[[["string",3]]],[[["str",15]]],[[]],[[]],[[]],[[]],[[]],[[],[["result",4,["option","error"]],["option",4,["buffer"]],["error",3]]],[[],[["result",4,["option","error"]],["option",4,["buffer"]],["error",3]]],[[["u64",15]],[["cacheentry",4],["option",4,["cacheentry"]]]],[[],[["result",4,["vec","error"]],["vec",3],["error",3]]],[[],[["result",4,["vec","error"]],["vec",3],["error",3]]],[[["debug",8],["buffer",3],["rangebounds",8,["buffer"]]],[["result",4,["vec","error"]],["vec",3],["error",3]]],[[["rangebounds",8,["buffer"]],["debug",8],["buffer",3],["clone",8]],[["result",4,["vec","error"]],["vec",3],["error",3]]],[[],["error",3]],[[["u64",15],["buffer",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],[["option",4],["error",3],["result",4,["option","error"]]]],[[],[["option",4],["error",3],["result",4,["option","error"]]]],[[],[["result",4,["option","error"]],["option",4,["buffer"]],["error",3]]],[[],[["result",4,["option","error"]],["option",4,["buffer"]],["error",3]]],[[],["bound",4]],[[],["str",15]],[[["path",3],["asref",8,["path"]]]],[[["usize",15]]],[[],[["roots",3],["result",4,["roots","error"]],["error",3]]],[[["buffer",3]],[["option",4,["ordering"]],["ordering",4]]],[[],["pathbuf",3]],[[],["path",3]],[[],[["usize",15],["result",6,["usize"]]]],[[["usize",15]],[["error",3],["result",4,["error"]]]],[[],[["result",4,["option","error"]],["option",4,["buffer"]],["error",3]]],[[],[["result",4,["option","error"]],["option",4,["buffer"]],["error",3]]],[[],[["result",4,["option","error"]],["option",4,["buffer"]],["error",3]]],[[["u64",15],["anysendsync",8]]],[[["bool",15]],[["result",4,["aborterror"]],["aborterror",4]]],[[["bool",15]],[["result",4,["aborterror"]],["aborterror",4]]],[[["bool",15]],[["result",4,["aborterror"]],["aborterror",4]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[["threadpool",3]]],[[],[["error",8],["option",4,["error"]]]],[[],[["error",8],["option",4,["error"]]]],[[],[["error",8],["option",4,["error"]]]],[[],[["error",8],["option",4,["error"]]]],[[]],[[]],[[]],[[]],[[],["buffer",3]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],null,[[],[["executingtransaction",3],["result",4,["executingtransaction","error"]],["error",3]]],[[],["transactionmanager",3]],null,[[["usize",15]],[["transactiontree",3],["option",4,["transactiontree"]]]],[[["cow",4,["str"]],["into",8,["cow"]]],[["error",3],["result",4,["tree","error"]],["tree",3]]],[[],[["vec",3,["string"]],["result",4,["vec","error"]],["error",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["vault",8]]],[[],[["vault",8],["option",4,["vault"]]]],null,null,null,null,null,null,null,null,null,null,null,[[],[["result",4,["error"]],["error",3]]],[[]],[[]],[[]],[[]],[[],["pathids",3]],[[]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[["fnonce",8]]],[[],["pathids",3]],[[],[["error",3],["result",4,["bool","error"]],["bool",15]]],[[],[["result",4,["error"]],["error",3]]],[[["fileop",8]]],[[]],[[],[["error",3],["result",4,["bool","error"]],["bool",15]]],[[],[["u64",15],["error",3],["result",4,["u64","error"]]]],[[["formatter",3]],["result",6]],[[]],[[]],null,[[],[["u64",15],["option",4,["u64"]]]],[[],[["u64",15],["option",4,["u64"]]]],[[]],[[]],[[],[["u64",15],["error",3],["result",4,["u64","error"]]]],null,null,[[["u64",15],["option",4,["u64"]]],[["result",4,["error"]],["error",3]]],[[["u64",15],["option",4,["u64"]]],[["result",4,["error"]],["error",3]]],[[],["path",3]],null,[[],[["result",4,["error"]],["error",3]]],[[["path",3],["fnonce",8]],[["result",4,["error"]],["error",3]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[],[["result",4,["error"]],["error",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["stdfilemanager",3]],[[]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[["fnonce",8]]],[[],["stdfilemanager",3]],[[],[["error",3],["result",4,["bool","error"]],["bool",15]]],[[],[["result",4,["error"]],["error",3]]],[[]],[[["fileop",8,["stdfile"]],["stdfile",3]]],[[],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],[["u64",15],["option",4,["u64"]]]],[[],[["u64",15],["option",4,["u64"]]]],[[]],[[]],[[]],[[],[["u64",15],["error",3],["result",4,["u64","error"]]]],[[["u64",15],["option",4,["u64"]]],[["result",4,["error"]],["error",3]]],[[["u64",15],["option",4,["u64"]]],[["result",4,["error"]],["error",3]]],[[],["path",3]],[[],[["result",6,["usize"]],["usize",15]]],[[],[["result",4,["error"]],["error",3]]],[[["fnonce",8],["path",3],["stdfilemanager",3]],[["result",4,["error"]],["error",3]]],[[["seekfrom",4]],[["u64",15],["result",6,["u64"]]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],[["result",6,["usize"]],["usize",15]]],null,null,null,[[],[["result",4,["error"]],["error",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["memoryfilemanager",3]],[[]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[["fnonce",8]]],[[],["memoryfilemanager",3]],[[],[["error",3],["result",4,["bool","error"]],["bool",15]]],[[],[["result",4,["error"]],["error",3]]],[[["fileop",8,["memoryfile"]],["memoryfile",3]]],[[],[["error",3],["result",4,["bool","error"]],["bool",15]]],[[],[["u64",15],["error",3],["result",4,["u64","error"]]]],[[],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],[["u64",15],["option",4,["u64"]]]],[[],[["u64",15],["option",4,["u64"]]]],[[]],[[]],[[]],[[],[["u64",15],["error",3],["result",4,["u64","error"]]]],[[["u64",15],["option",4,["u64"]]],[["result",4,["error"]],["error",3]]],[[["u64",15],["option",4,["u64"]]],[["result",4,["error"]],["error",3]]],[[],["path",3]],[[],[["usize",15],["result",6,["usize"]]]],[[],[["result",4,["error"]],["error",3]]],[[["memoryfilemanager",3],["path",3],["fnonce",8]],[["result",4,["error"]],["error",3]]],[[["seekfrom",4]],[["u64",15],["result",6,["u64"]]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],[["usize",15],["result",6,["usize"]]]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["transactionmanager",3]],[[],["state",3]],[[]],[[]],[[],[["result",4,["error"]],["error",3]]],[[],["u64",15]],[[],[["u64",15],["option",4,["u64"]]]],[[],[["buffer",3],["option",4,["buffer"]]]],[[]],[[]],[[]],[[]],[[["logentry",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u64",15]],[["option",4,["logentry"]],["error",3],["result",4,["option","error"]]]],null,[[["context",3],["state",3]],[["result",4,["error"]],["error",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["logentry",3]],[[],["bool",15]],[[],["u64",15]],[[["logentry",3]],["bool",15]],[[["intoiterator",8]],["transactionhandle",3]],[[["intoiterator",8]],["transactionhandle",3]],[[],["u64",15]],[[["path",3],["state",3],["context",3]],[["result",4,["error"]],["error",3]]],[[],["path",3]],[[["vec",3,["logentry"]],["logentry",3]],[["result",4,["error"]],["error",3]]],[[["transactionhandle",3]],[["treelocks",6],["result",4,["treelocks","error"]],["error",3]]],[[["path",3],["state",3],["context",3]],[["result",4,["error"]],["error",3]]],[[["fnmut",8]],[["result",4,["error"]],["error",3]]],[[["fnmut",8]],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[["path",3],["context",3]],[["result",4,["error"]],["error",3]]],[[],["state",3]],[[],["state",3]],[[]],[[]],[[],["u64",15]],[[["u64",15]],[["result",4,["option","error"]],["option",4,["u64"]],["error",3]]],[[["u64",15]],[["error",3],["result",4,["bool","error"]],["bool",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["u64",15],["anytreestate",8],["context",3],["option",4,["transactionmanager"]],["transactionmanager",3],["path",3]],[["result",4,["box","error"]],["error",3],["box",3,["anytransactiontree"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[],["btreeentry",3]],[[],["btreenode",4]],[[],["versionedbyidindex",3]],[[],["unversionedbyidindex",3]],[[],["byidstats",3]],[[],["bysequenceindex",3]],[[],["bysequencestats",3]],[[],["interior",3]],[[],["pointer",4]],[[],["keyentry",3]],[[],["state",3]],[[],["activestate",3]],[[],["unversionedtreeroot",3]],[[],["versionedtreeroot",3]],[[],["keyevaluation",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["result",4,["error"]],["error",3]]],[[["option",4,["transactablecompaction"]],["transactablecompaction",3]],[["result",4,["error"]],["error",3]]],[[["buffer",3],["buffer",3],["u64",15],["option",4,["buffer"]],["option",4,["buffer"]]],[["compareandswaperror",4],["result",4,["compareandswaperror"]]]],[[["hashmap",3],["option",4,["vault"]],["bool",15],["vault",8],["pagedwriter",3]],[["result",4,["error"]],["error",3]]],[[["hashmap",3],["option",4,["vault"]],["bool",15],["vault",8],["pagedwriter",3]],[["result",4,["error"]],["error",3]]],[[["hashmap",3],["option",4,["vault"]],["bool",15],["vault",8],["pagedwriter",3]],[["result",4,["error"]],["error",3]]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],null,[[]],[[],["state",3]],[[],["activestate",3]],[[],["unversionedtreeroot",3]],[[],["versionedtreeroot",3]],[[],[["box",3,["anytreestate"]],["anytreestate",8]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[["buffer",3]],[["result",4,["error"]],["error",3]]],[[["buffer",3]],[["result",4,["error"]],["error",3]]],[[["buffer",3]],[["result",4,["error"]],["error",3]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[["pageheader",4]],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["btreenode",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["btreeentry",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["btreeentry",3],["option",4,["btreeentry"]]]],[[["bool",15]],[["result",4,["option","error"]],["option",4,["buffer"]],["error",3]]],[[["option",4,["vault"]],["option",4,["chunkcache"]],["vault",8],["chunkcache",3]],[["result",4,["error"]],["error",3]]],[[["option",4,["vault"]],["option",4,["chunkcache"]],["vault",8],["chunkcache",3]],[["result",4,["error"]],["error",3]]],[[["option",4,["vault"]],["option",4,["chunkcache"]],["vault",8],["chunkcache",3]],[["result",4,["error"]],["error",3]]],[[["bool",15]],[["result",4,["vec","error"]],["vec",3],["error",3]]],[[],[["btreeentry",3],["option",4,["btreeentry"]]]],[[["rangebounds",8,["buffer"]],["buffer",3],["debug",8],["bool",15]],[["result",4,["vec","error"]],["vec",3],["error",3]]],null,[[]],[[]],[[]],[[["u64",15],["option",4,["transactionmanager"]],["option",4,["u64"]],["context",3],["transactionmanager",3],["path",3],["state",3]],[["result",4,["error"]],["error",3]]],[[],["bool",15]],[[["u64",15],["usize",15],["option",4,["u64"]],["option",4,["usize"]]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],null,[[["bool",15]],[["option",4],["error",3],["result",4,["option","error"]]]],[[["bool",15]],[["result",4,["option","error"]],["option",4,["buffer"]],["error",3]]],null,null,[[["usize",15],["option",4,["usize"]],["option",4,["vault"]],["bool",15],["vault",8],["option",4,["chunkcache"]],["chunkcache",3]],[["result",4,["error"]],["error",3]]],null,[[["usize",15],["option",4,["usize"]],["option",4,["vault"]],["option",4,["chunkcache"]],["vault",8],["fnonce",8],["chunkcache",3]],[["result",4,["aborterror"]],["aborterror",4]]],[[],["buffer",3]],null,[[["usize",15],["pagedwriter",3],["modification",3,["buffer"]],["buffer",3],["option",4,["usize"]]],[["result",4,["error"]],["error",3]]],[[["usize",15],["modification",3,["buffer"]],["buffer",3],["pagedwriter",3],["option",4,["usize"]]],[["result",4,["error"]],["error",3]]],[[["usize",15],["modification",3,["buffer"]],["buffer",3],["pagedwriter",3],["option",4,["usize"]]],[["result",4,["error"]],["error",3]]],[[["buffer",3],["modification",3,["buffer"]]],[["result",4,["error"]],["error",3]]],[[],["str",15]],null,[[]],[[["u64",15],["usize",15],["option",4,["u64"]],["option",4,["usize"]]]],[[["chunkcache",3],["state",3],["option",4,["arc"]],["option",4,["chunkcache"]],["arc",3,["vault"]]],[["result",4,["error"]],["error",3]]],[[],["option",4]],null,null,[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],[["u64",15],["option",4,["u64"]]]],null,null,null,null,[[["u64",15],["buffer",3]],[["result",4,["error"]],["error",3]]],[[],[["rwlockreadguard",6,["activestate"]],["activestate",3]]],[[["option",4,["transactionmanager"]],["state",3],["context",3],["transactionmanager",3]],[["result",4,["error"]],["error",3]]],[[]],[[]],[[]],[[]],[[["u64",15]],[["result",4,["option","error"]],["option",4,["buffer"]],["error",3]]],[[["u64",15]],[["result",4,["option","error"]],["option",4,["buffer"]],["error",3]]],[[]],[[]],[[]],[[]],null,[[["option",4,["vault"]],["option",4,["chunkcache"]],["vault",8],["scanargs",3],["chunkcache",3]],[["aborterror",4],["result",4,["bool","aborterror"]],["bool",15]]],[[["scanargs",3],["option",4,["vault"]],["option",4,["chunkcache"]],["vault",8],["chunkcache",3]],[["aborterror",4],["result",4,["bool","aborterror"]],["bool",15]]],[[["option",4,["vault"]],["option",4,["chunkcache"]],["vault",8],["scanargs",3],["chunkcache",3]],[["aborterror",4],["result",4,["bool","aborterror"]],["bool",15]]],[[["bool",15]],[["result",4,["aborterror"]],["aborterror",4]]],[[["bool",15]],[["result",4,["aborterror"]],["aborterror",4]]],null,null,null,[[["pagedwriter",3],["vec",3]],[["result",4,["error"]],["error",3]]],[[["pagedwriter",3],["vec",3]],[["result",4,["error"]],["error",3]]],[[["pagedwriter",3],["vec",3]],[["result",4,["error"]],["error",3]]],null,[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["u64",15]],null,[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],null,null,null,[[],[["treeroot",3],["managedfile",8]]],[[],[["treeroot",3],["managedfile",8]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["u8",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[["option",4,["transactionmanager"]],["state",3],["context",3],["transactionmanager",3]],[["result",4,["error"]],["error",3]]],null,null],"p":[[4,"CompareAndSwapError"],[4,"ErrorKind"],[4,"AbortError"],[3,"Buffer"],[3,"Error"],[3,"ExecutingTransaction"],[3,"TransactionTree"],[3,"Tree"],[3,"Roots"],[3,"Config"],[3,"ThreadPool"],[3,"ChunkCache"],[3,"Context"],[8,"Vault"],[8,"FileManager"],[8,"ManagedFile"],[8,"FileOp"],[3,"RecreatedFile"],[3,"PathIds"],[8,"OpenableFile"],[3,"StdFileManager"],[3,"StdFile"],[3,"OpenStdFile"],[3,"MemoryFileManager"],[3,"MemoryFile"],[3,"OpenMemoryFile"],[3,"TransactionLog"],[3,"TransactionHandle"],[3,"LogEntry"],[3,"TransactionManager"],[3,"TreeLock"],[3,"TreeLockHandle"],[3,"State"],[4,"Operation"],[4,"PageHeader"],[8,"Root"],[4,"BTreeNode"],[4,"Pointer"],[4,"KeyEvaluation"],[4,"KeyOperation"],[3,"ByIdStats"],[3,"TreeRoot"],[3,"CompareSwap"],[3,"TransactableCompaction"],[3,"PagedWriter"],[3,"BTreeEntry"],[3,"VersionedByIdIndex"],[3,"UnversionedByIdIndex"],[3,"BySequenceIndex"],[3,"BySequenceStats"],[3,"Interior"],[3,"KeyEntry"],[3,"Modification"],[3,"State"],[3,"ActiveState"],[3,"UnversionedTreeRoot"],[3,"VersionedTreeRoot"],[3,"KeySequence"],[3,"TreeFile"],[3,"KeyRange"],[8,"Reducer"],[8,"ValueIndex"],[13,"Loaded"]]},\
"xtask":{"doc":"","t":[4,3,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,5,11,11,11,11,11,11,12],"n":["Commands","CoverageConfig","GenerateBenchmarkOverview","GenerateCodeCoverageReport","borrow","borrow","borrow_mut","borrow_mut","clap","deref","deref","deref_mut","deref_mut","drop","drop","fmt","from","from","from_clap","generate_benchmark_overview","init","init","into","into","main","try_from","try_from","try_into","try_into","type_id","type_id","install_dependencies"],"q":["xtask","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","xtask::Commands"],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,1,2,1,2,1,1,2,1,2,1,2,1,1,2,1,1,0,2,1,2,1,0,2,1,2,1,2,1,3],"f":[null,null,null,null,[[]],[[]],[[]],[[]],[[],["app",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[]],[[["argmatches",3]]],[[],["result",6]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null],"p":[[4,"Commands"],[3,"CoverageConfig"],[13,"GenerateCodeCoverageReport"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};