var searchIndex = JSON.parse('{\
"benchmarks":{"doc":"This page has been left intentionally blank.","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"nebari":{"doc":"This crate provides the <code>Roots</code> type, which is the …","t":[4,3,3,4,3,13,3,13,3,13,16,4,3,13,13,13,13,13,3,13,13,13,3,3,13,3,3,13,3,13,8,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,8,16,16,8,8,8,8,16,8,8,3,3,0,10,11,11,11,11,11,11,10,10,10,11,10,10,10,10,10,10,11,11,11,0,10,10,11,11,10,0,12,10,10,10,12,10,10,11,11,11,11,11,11,11,4,4,4,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,3,3,3,3,3,3,3,3,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,8,3,4,8,3,3,3,3,3,13,6,8,18,18,16,3,13,3,4,3,3,13,13,3,13,4,17,4,3,4,13,16,8,13,13,8,4,3,8,13,13,13,13,13,3,13,3,3,3,3,13,6,3,13,3,8,6,3,13,3,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,12,11,11,11,11,11,11,10,11,12,11,11,11,11,11,11,10,11,11,10,10,11,11,12,12,12,12,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,10,12,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,12,12,11,12,11,11,12,10,11,11,11,10,11,12,12,11,11,11,11,11,11,11,12,12,11,10,11,11,11,11,12,12,12,12,11,11,10,11,11,11,11,11,11,10,11,11,11,12,10,11,11,11,11,12,12,12,10,11,11,10,11,12,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,10,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,12,12,12,12,12,12,12,12,12],"n":["AbortError","ArcBytes","ChunkCache","CompareAndSwapError","Config","Conflict","Context","DataIntegrity","Error","Error","Error","ErrorKind","ExecutingTransaction","Internal","InvalidTreeName","Io","KeyTooLarge","KeysNotOrdered","LockedTransactionTree","Message","Nebari","Other","Roots","ThreadPool","TransactionPushedOutOfOrder","TransactionTree","Tree","TreeCompacted","UnlockedTransactionTree","ValueTooLarge","Vault","Vault","as_slice","backtrace","begin_transaction","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrowed","cache","cache","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","commit","compact","compare_and_swap","compare_and_swap","context","count","current_sequence_id","decrypt","default","default","default","default_for","default_state","delete_tree","deref","deref","deref_mut","deserialize","drop","encrypt","entry","entry_mut","eq","eq","eq","eq","eq","file_manager","file_manager","first","first","first_key","first_key","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get","get","get","get_hash","get_multiple","get_multiple","get_range","get_range","hash","infallible","insert","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_owned","into_vec","io","iter","kind","last","last","last_key","last_key","lock","modify","modify","name","name","new","new","new","new","open","owned","partial_cmp","partial_cmp","partial_cmp","partial_cmp","path","path","read","read_bytes","reduce","reduce","remove","remove","replace","replace","replace_with_decoded","rollback","scan","scan","scan_sequences","serialize","set","set","shared_thread_pool","slice","source","source","source","source","split_at","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","transaction","transaction","transactions","tree","tree","tree","tree_names","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unlocked_tree","vault","vault","with_any_vault","with_cache","with_vault","0","0","0","0","0","0","0","0","0","File","File","FileHandle","FileManager","FileOp","ManagedFile","ManagedFileOpener","Manager","OpenableFile","OperableFile","PathIds","RecreatedFile","any","append","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","close","close","close_handles","default","delete","delete_directory","execute","execute","exists","file_length","fmt","from","from","fs","id","id","into","into","length","memory","new_id","open_for_append","open_for_read","path","previous_id","read","replace_with","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","AnyFile","AnyFileHandle","AnyFileManager","Memory","Memory","Memory","Std","Std","Std","append","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","close","close","close_handles","default","delete","delete_directory","execute","exists","file_length","flush","fmt","fmt","fmt","from","from","from","id","id","into","into","into","length","memory","open_for_append","open_for_read","path","read","read","replace_with","seek","std","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write","0","0","0","0","0","0","OpenStdFile","StdFile","StdFileManager","StdFileOpener","append","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","close","close","close_handles","default","delete","delete_directory","drop","execute","exists","file_length","flush","fmt","fmt","fmt","from","from","from","from","id","id","into","into","into","into","length","open_for_append","open_for_append","open_for_read","open_for_read","path","read","read","replace_with","seek","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","write","MemoryFile","MemoryFileManager","MemoryFileOpener","OpenMemoryFile","append","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","close","close","close_handles","default","delete","delete_directory","execute","exists","file_length","flush","fmt","fmt","fmt","from","from","from","from","id","id","into","into","into","into","length","open_for_append","open_for_append","open_for_read","open_for_read","path","read","read","replace_with","seek","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","write","0","LogEntry","LogPosition","ManagedTransaction","State","TransactionHandle","TransactionId","TransactionLog","TransactionManager","TreeLock","TreeLockHandle","TreeLocks","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","close","cmp","commit","current_transaction_id","current_transaction_id","data","default","default","deref","deref","deref","deref_mut","deref_mut","drop","drop","eq","eq","file_offset","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_path","get","get_hash","hash","id","initialize_state","into","into","into","into","into","into","into","into","into","into","into_owned","is_empty","last_written_transaction","len","ne","ne","new_transaction","new_transaction","new_transaction","next_transaction_id","open","partial_cmp","path","push","read","rollback","scan","scan","set_data","spawn","state","state","to_owned","to_owned","to_owned","to_string","total_size","transaction_position","transaction_was_successful","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","0","ActiveState","AnyTreeRoot","BTreeEntry","BTreeNode","BorrowByteRange","BorrowedRange","ByIdStats","BySequenceIndex","BySequenceStats","CompareSwap","CompareSwap","CompareSwapFn","EmbeddedIndex","HEADER","HEADER","Index","Interior","Interior","KeyEntry","KeyOperation","KeyRange","KeySequence","Leaf","Loaded","Modification","OnDisk","Operation","PAGE_SIZE","PageHeader","PagedWriter","Pointer","ReadData","ReducedIndex","Reducer","Remove","Remove","Root","ScanEvaluation","SequenceId","Serializable","Set","Set","SetEach","Skip","Skip","State","Stop","TransactableCompaction","TreeFile","TreeRoot","U64Range","Uninitialized","Unversioned","UnversionedByIdIndex","UnversionedHeader","UnversionedTreeRoot","ValueIndex","Versioned","VersionedByIdIndex","VersionedHeader","VersionedTreeRoot","alive_keys","begin_transaction","begin_transaction","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_as_bytes","borrow_as_bytes","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","by_id_root","by_id_root","by_sequence_root","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","commit","compact","compare_and_swap","copy_data_to","copy_data_to","copy_data_to","count","count","count","current_position","default","default","default","default","default","default","default_state","default_state","deleted_keys","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize_from","dirty","dirty","dirty","dirty","embedded","embedded","embedded","end","end_bound","end_bound","eq","eq","file_id","first","first_key","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get","get","get_hash","get_multiple","get_multiple","get_multiple","get_multiple","get_mut","get_range","hash","index","index","initialize_default","initialize_default","initialize_default","initialize_state","initialized","initialized","initialized","initialized","initialized","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","key","key","key","key","keys","last","last_key","last_sequence","last_sequence","load","manager","map_loaded_entry","max_key","max_order","modify","modify","modify","modify","name","name","name","name","ne","new","new","new","new","next","next_sequence","node","operation","partial_cmp","position","position","position","position","position","position","position","position","position","read","read","reduce","reduce","reduce","reduce","reduce","remove","replace","rereduce","rereduce","rereduce","rereduce","root","scan","scan","scan","scan","scan_sequences","sequence","sequence","sequence_id","serialize","serialize","serialize","serialize_to","set","start","start_bound","start_bound","state","stats","stats","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","total_indexed_bytes","total_keys","total_sequences","transaction_id","transaction_id","transaction_id","transaction_id","transaction_id","transaction_id","tree","tree","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value_length","value_length","value_length","vault","with_vault","write","0","0","0","0","0","0","0","entry","previous_location"],"q":["nebarinebari::AbortError","","nebari::CompareAndSwapError","","nebari::ErrorKind","","","","","nebari::io","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nebari::io::any","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nebari::io::any::AnyFile","","nebari::io::any::AnyFileHandle","","nebari::io::any::AnyFileManager","","nebari::io::fs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nebari::io::memory","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nebari::transaction","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nebari::treenebari::tree::BTreeNode","","nebari::tree::KeyOperation","nebari::tree::Operation","","","nebari::tree::Pointer","",""],"d":["An error that could come from user code or Nebari.","An immutable buffer of bytes that can be cloned, sliced, …","A configurable cache that operates at the “chunk” …","An error returned from <code>compare_and_swap()</code>.","A database configuration used to open a database.","The stored value did not match the conditional value.","A shared environment for database operations.","An unrecoverable data integrity error was encountered.","An error from Nebari as well as an associated backtrace.","Another error occurred while executing the operation.","The error type that the vault can produce.","An error from Nebari.","An executing transaction. While this exists, no other …","An internal error occurred. These errors are not intended …","An invalid tree name was provided.","An error occurred while performing IO.","A key was too large.","A multi-key operation did not have its keys ordered.","A locked transaction tree. This transactional tree is …","An error has occurred. The string contains human-readable …","An error from Roots occurred.","An error unrelated to Nebari occurred.","A multi-tree transactional B-Tree database.","A thread pool that commits transactions to disk in …","An transaction was pushed to the log out of order.","A tree that is modifiable during a transaction.","A named collection of keys and values.","The underlying tree file has been compacted, and the …","A tree that belongs to an <code>ExecutingTransaction</code>.","A value was too large.","A provider of encryption for blocks of data.","An error ocurred in the vault.","Returns this instance as a slice of <code>u8</code>s.","Returns the backtrace of where this error was created.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a borrowed instance.","Sets the chunk cache to use for this database.","Returns the context’s chunk cache.","","","","","","","","","","","","","","","","Commits the transaction. Once this function has returned, …","Rewrites the database to remove data that is no longer …","Compares the value of <code>key</code> against <code>old</code>. If the values …","Compares the value of <code>key</code> against <code>old</code>. If the values …","Returns the vault used to encrypt this database.","Returns the number of keys stored in the tree. Does not …","Returns the latest sequence id.","Decrypts a previously encrypted <code>payload</code>, returning the …","","","","Returns a default configuration to open a database located …","","Removes a tree. Returns true if a tree was deleted.","","","","","","Encrypts <code>payload</code>, returning a new buffer that contains all …","Returns the <code>LogEntry</code> for this transaction.","Returns a mutable reference to the <code>LogEntry</code> for this …","","","","","","Sets the file manager.","The file manager for the <code>ManagedFile</code> implementor.","Returns the first key and value of the tree.","Returns the first key and value of the tree.","Returns the first key of the tree.","Returns the first key of the tree.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the current value of <code>key</code>. This will return updated …","Retrieves the current value of <code>key</code>, if present. Does not …","Looks up a previously read chunk for <code>file_path</code> at <code>position</code>,","","Retrieves the values of <code>keys</code>. If any keys are not found, …","Retrieves the values of <code>keys</code>. If any keys are not found, …","Retrieves all of the values of keys within <code>range</code>.","Retrieves all of the values of keys within <code>range</code>.","","Unwraps the error contained within an infallible abort …","Adds a new cached chunk for <code>file_path</code> at <code>position</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Converts this instance into a static lifetime, …","Converts this instance into a <code>Vec&lt;u8&gt;</code>, attempting to do so …","IO abstractions for Nebari.","Returns an iterator for the contained bytes.","The error that occurred.","Returns the last key and value of the tree.","Returns the last key and value of the tree.","Returns the last key of the tree.","Returns the last key of the tree.","Locks this tree so that operations can be performed …","Executes a modification.","Executes a modification.","","Returns the name of the tree.","Returns an empty instance.","Creates a new config to open a database located at <code>path</code>.","Returns a thread pool that will spawn up to <code>maximum_threads</code>…","Create a new cache with a maximum number of entries (…","Opens the database, or creates one if the target path doesn…","Returns an instance with the owned bytes.","","","","","Returns the path to the file for this tree.","Returns the path to the database directory.","","Reads <code>count</code> bytes from the front of the bytes, returning a …","Returns the reduced index over the provided range. This is …","Returns the reduced index over the provided range. This is …","Removes <code>key</code> and returns the existing value, if present.","Removes <code>key</code> and returns the existing value, if present. …","Sets <code>key</code> to <code>value</code>. If a value already exists, it will be …","Sets <code>key</code> to <code>value</code>. If a value already exists, it will be …","Adds a new cached chunk for <code>file_path</code> at <code>position</code>.","Rolls the transaction back. It is not necessary to call …","Scans the tree across all nodes that might contain nodes …","Scans the tree across all nodes that might contain nodes …","Scans the tree for keys that are contained within <code>range</code>. …","","Sets <code>key</code> to <code>value</code>.","Sets <code>key</code> to <code>value</code>. This is executed within its own …","Uses the <code>thread_pool</code> provided instead of creating its own. …","Returns a slice of these bytes as its own <code>ArcBytes</code> …","","","","","Splits the bytes into two parts at <code>offset</code>. This method …","","Converts a clone of this instance into a static lifetime.","","","","","","","","","","","ACID-compliant transaction log and manager.","Begins a transaction over <code>trees</code>. All trees will be …","Returns the transaction manager for this database.","Append-only B-Tree implementation","Accesses a locked tree.","Opens a tree named <code>name</code>.","Returns a list of all the names of trees contained in this …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Accesses an unlocked tree. Note: If you clone an …","Sets the vault to use for this database.","Returns the vault as a dynamic reference.","Replaces the vault currently set with <code>vault</code>.","Replaces the cache currently set with <code>cache</code>.","Replaces the vault currently set with <code>vault</code>.","","","","","","","","","","A generic file trait.","The type of file managed by this manager.","A file handle type, which can have operations executed …","A manager that is responsible for controlling write access …","An operation to perform on a file.","A file that is managed by a <code>FileManager</code>.","A type that can open managed files.","The file manager that synchronizes file access across …","A file that can have operations performed on it.","A file that can have an operation performed against it.","Converts between paths and unique IDs.","A file that has had its contents replaced. While this …","A wrapper type for any file type.","Returns a file handle that can be used to read and write.","","","","","","","Safely closes the file after flushing any pending …","Closes the file. This may not actually close the …","Closes all open handles for <code>path</code>, and calls …","","Check if the file exists.","Removes a directory and all of its contents.","Executes an operation and returns the results.","Executes the operation and returns the result.","Check if the file exists.","Returns the length of the file.","","Returns the argument unchanged.","Returns the argument unchanged.","Filesystem IO provided by <code>std::fs</code>.","Returns the unique ID of this file. Only unique within the …","Returns the id of the file assigned from the file manager.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the length of the file.","A virtual memory-based filesystem.","The file’s new id.","Opens or creates a file at <code>path</code>, positioning the cursor at …","Opens a file at <code>path</code> with read-only permission.","Returns the path to the file.","The file’s previous id.","Returns a file handle that can be used for reading …","Replaces the current file with the file located at <code>path</code> …","","","","","","","","A file that can be either a <code>StdFile</code> or <code>MemoryFile</code>.","A handle to an open file that could be either an …","A file manager that can either be a <code>StdFileManager</code> or a …","A simulated file backed by memory.","A simulated file system backed by memory.","An open file in memory.","A file backed by a filesystem.","A file manager that uses the filesystem.","An open file on the filesystem.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns a new memory-backed manager.","","","","","","","","Returns a new filesystem-backed manager.","","","","","","","","","","","","","","","","","","An open <code>StdFile</code> that belongs to a <code>StdFileManager</code>.","An open file that uses <code>std::fs</code>.","The <code>FileManager</code> for <code>StdFile</code>.","A <code>ManagedFileOpener</code> implementation that produces <code>StdFile</code>s.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","A fake “file” represented by an in-memory buffer. This …","The <code>FileManager</code> implementation for <code>MemoryFile</code>. Simulates a …","A <code>ManagedFileOpener</code> implementation that produces <code>MemoryFile</code>…","An open <code>MemoryFile</code> that is owned by a <code>MemoryFileManager</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","An entry in a transaction log.","The active log position information.","A transaction that is managed by a <code>TransactionManager</code>.","The transaction log state.","A handle to an executing transaction.","A unique identifier of a transaction within a transaction …","A transaction log that records changes for one or more …","A shared <code>TransactionLog</code> manager. Allows multiple threads …","An acquirable lock for a tree.","A handle to a lock. Upon dropping, the lock will be …","A collection of handles that keep trees locked.","","","","","","","","","","","","","","","","","","","","","","","","","","","Closes the transaction log.","","Commits the transaction to the transaction manager that …","Returns the current transaction id.","Returns the last successfully written transaction id, or …","Returns the associated data, if any.","","","","","","","","","","","","The offset of the writer within the file.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new uninitialized state for a transaction log …","Returns the executed transaction with the id provided. …","","","The unique id of this entry.","Initializes <code>state</code> to contain the information about the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert this entry into a <code>&#39;static</code> lifetime.","Returns if the log is empty.","The last successfully written transaction id.","Returns the current length of the log.","","","Begins a new transaction, exclusively locking <code>trees</code>.","Creates a new transaction, exclusively locking <code>trees</code>. Will …","Creates a new transaction, exclusively locking <code>trees</code>. Will …","Returns the next transaction id that will be used.","Opens a transaction log for writing.","","Returns the path to the file.","Logs one or more transactions. After this call returns, …","Opens a transaction log for reading.","Rolls the transaction back. It is not necessary to call …","Logs one or more transactions. After this call returns, …","Scans the transaction log for entries with ids within <code>range</code>…","Sets the associated data that will be stored in the …","Spawns a new transaction manager. The transaction manager …","Returns the current state of the log.","Returns the current state of the transaction log.","","","","","Returns the total size of the transaction log file.","Returns the location on disk of the transaction, if found.","Returns true if the transaction id was recorded in the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An active state for a tree file.","A named tree that can be used in a transaction.","A B-Tree entry that stores a list of key-<code>Index</code> pairs.","A B-Tree entry that stores a list of key-<code>Index</code> pairs.","Borrows a range.","A borrowed range in byte form.","The reduced index of both <code>VersionedByIdIndex</code> and …","The index stored within <code>VersionedTreeRoot::by_sequence_root</code>…","The reduced index of <code>BySequenceIndex</code>.","A wrapper for a <code>CompareSwapFn</code>.","Executes the <code>CompareSwap</code>. The original value (or <code>None</code> if …","A function that is allowed to check the current value of a …","An index that is embeddable within a tree.","The unique header byte for this root.","The unique header byte for this root.","The primary index type contained within this root.","An interior B-Tree node. Does not contain values directly, …","An interior node that contains pointers to other nodes.","An entry for a key. Stores a single index value for a …","An operation to perform on a key.","One or more keys.","A stored revision of a key.","An inline value. Overall, the B-Tree entry is a key-value …","An in-memory node that may have previously been saved …","A tree modification.","The position on-disk of the node.","An operation that is performed on a set of keys.","The number of bytes in each page on-disk.","The header byte for a tree file’s page.","Writes data in pages, allowing for quick scanning through …","A pointer to a location on-disk. May also contain the node …","Read the data for this entry.","The primary index type contained within this root.","Reduces one or more <code>Index</code>es or instances of <code>Self</code> into a …","Removes the keys.","Remove the key.","A B-Tree root implementation.","The result of evaluating a key or node that was scanned.","A unique ID of a single modification to a key in a …","A type that can be serialized and deserialized.","Sets all keys to the value.","Set the key to the new value.","Sets each key to the corresponding entry in this value. …","Do not alter the key.","Skip this entry’s contained data.","The current state of a tree file. Must be initialized …","Stop scanning.","A compaction process that runs in concert with a …","An append-only tree file.","A named tree with a specific root type.","A range of u64 values that is able to be used as keys in a …","An uninitialized node. Only used temporarily during …","An unversioned tree with no additional indexed data.","The index stored within <code>UnversionedTreeRoot::by_id_root</code>.","An <code>UnversionedTreeRoot</code> header.","A versioned B-Tree root. This tree root internally uses …","An index that serializes a value to the file.","An versioned tree with no additional indexed data.","The index stored within <code>VersionedTreeRoot::by_id_root</code>.","A <code>VersionedTreeRoot</code> header.","A versioned B-Tree root. This tree root internally uses …","The number of keys that have values stored within them.","Begins a transaction on this tree.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a borrowed version of byte representation the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The by-id B-Tree.","The by-id B-Tree.","The by-sequence B-Tree.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Commits the tree. This is only needed if writes were done …","Rewrites the database, removing all unused data in the …","Compares the value of <code>key</code> against <code>old</code>. If the values …","Copies all data from <code>file</code> into <code>writer</code>, updating <code>self</code> with …","","","Returns the number of values contained in this tree, not …","","","The current location within the file for data to be …","","","","","","","The default state for the underlying root type.","","The number of keys that no longer have values stored …","","","","","","","Deserializes the root from <code>bytes</code>.","","","Deserializes from <code>reader</code>, and returns the deserialized …","Returns true if the root needs to be saved.","","","Whether the node contains unsaved changes.","The embedded index.","The embedded index.","The embedded statistics.","The end bound for this range.","","","","","The current file id associated with this tree file. …","Returns the first key and value of the tree.","Returns the first key of the tree.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the previously-<code>load()</code>ed entry.","Gets the value stored for <code>key</code>.","","Iterates over the tree looking for <code>keys</code>. <code>keys</code> must be …","","","Gets the values stored in <code>keys</code>. Does not error if a key is …","Returns the previously-<code>load()</code>ed entry as a mutable …","Retrieves all keys and values with keys that are contained …","","Index the key and value.","The index value of this entry.","Resets the state to the default, initialized state. After …","","","Attempts to load the last saved state of this tree into …","Returns true if the tree is initialized.","Returns an initialized state. This should only be used if …","Returns true if the state has been initialized.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","The key associated with this sequence id.","The key with the highest sort value within.","The key of this entry.","The key that this entry was written for.","The keys to operate upon.","Returns the last key and value of the tree.","Returns the last key of the tree.","The previous sequence of this key.","The previous sequence id for this key, if any.","Attempts to load the node from disk. If the node is …","The transaction manager.","Loads the pointed at node, if necessary, and invokes …","Returns the highest-ordered key contained in this node.","The maximum “order” of the B-Tree. This controls the …","Modifies the tree.","","","Executes a modification.","The name of the tree.","","The name of the tree.","The name of the tree being compacted.","","Returns a new wrapped callback.","Returns an uninitialized state.","Returns a tree as contained in <code>file</code>.","Creates a new instance from the range passed in.","","Returns the nexxt sequence id after <code>self</code>.","The B-Tree node.","The operation to perform on the keys.","","The position on-disk of the stored value.","","","","Returns the position on-disk of the node being pointed at, …","The position of the value on disk.","The position of the value on disk.","The position of the value on disk.","The location of the node.","Reads the current state.","Opens a tree file with read-only permissions.","Reduces one or more indexes into a single reduced index.","","","","Returns the reduced index over the provided range. This is …","Removes <code>key</code> and returns the existing value, if present.","Sets <code>key</code> to <code>value</code>. If a value already exists, it will be …","Reduces one or more previously-reduced indexes into a …","","","","The root of the B-Tree.","Scans the tree over <code>range</code>. <code>args.key_evaluator</code> is invoked …","","","Scans the tree across all nodes that might contain nodes …","Scans the tree for keys that are contained within <code>range</code>. …","The last sequence ID inside of this root.","The unique sequence id.","The unique sequence id generated when writing the value to …","Serialize the root and return the bytes. Writes any …","","","Serializes into <code>writer</code> and returns the number of bytes …","Sets a key/value pair. Replaces any previous value if set. …","The start bound for this range.","","","The state of the file.","Returns the collected statistics for this node.","The reduced statistics.","","","","","","","","","","","","","","","","","","","","The total number of bytes stored on disk associated with …","Returns the total number of keys regardless of whether …","The total number of sequence entries.","Returns the current transaction id.","","","The transaction ID to store with this change.","The transaction ID of the tree root. If this transaction …","The transaction ID of the tree root. If this transaction …","Returns a reference to a named tree that contains this …","Returns a reference to a named tree that contains this …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The size of the value stored on disk.","The size of the value stored on disk.","The size of the value stored on disk.","The vault to use when opening the tree. If not set, the …","Replaces the vault currenty set with <code>vault</code>.","Opens a tree file with the ability to read and write.","","","","","","","","The loaded B-Tree entry.","The position on-disk of the node, if it was previously …"],"i":[0,0,0,0,0,1,0,2,0,1,3,0,0,2,2,2,2,2,0,2,4,4,0,0,2,0,0,2,0,2,0,2,5,6,7,5,5,8,9,10,11,7,6,2,12,1,13,4,14,15,16,5,8,9,10,11,7,6,2,12,1,13,4,14,15,16,5,13,16,5,7,12,13,14,15,16,5,7,12,13,14,15,16,5,8,7,11,7,12,7,11,3,5,14,16,13,7,12,5,10,10,5,8,3,8,8,5,5,5,5,5,13,16,11,7,11,7,5,6,6,2,2,12,1,1,13,4,4,14,15,16,5,5,5,5,5,5,5,5,5,5,8,9,10,11,7,6,6,6,6,6,6,6,6,2,2,2,2,2,2,12,1,1,13,4,4,14,15,16,11,7,15,5,11,7,11,7,5,4,15,5,8,9,10,11,7,6,2,12,1,13,4,14,15,16,5,5,5,0,5,6,11,7,11,7,9,11,7,7,7,5,13,14,15,13,5,5,5,5,5,7,12,5,5,11,7,11,7,11,7,15,8,11,7,7,5,11,7,13,5,6,2,1,4,5,5,5,7,12,13,14,15,16,6,2,1,4,0,12,12,0,8,12,12,5,8,9,10,11,7,6,2,12,1,13,4,14,15,16,5,8,9,10,11,7,6,2,12,1,13,4,14,15,16,5,8,9,10,11,7,6,2,12,1,13,4,14,15,16,8,13,16,16,16,16,17,18,19,20,21,22,23,24,25,0,26,26,0,0,0,0,27,0,0,0,0,0,26,28,29,28,29,29,29,30,31,26,29,26,26,32,33,26,26,29,28,29,0,30,31,28,29,30,0,28,34,34,30,28,26,31,29,28,29,28,29,28,29,0,0,0,35,36,37,35,36,37,36,35,36,37,35,36,37,36,36,35,37,36,36,36,36,37,36,36,35,35,36,37,35,36,37,35,37,35,36,37,35,36,36,36,35,35,36,37,35,36,36,35,36,37,35,36,37,35,36,37,35,38,39,40,41,42,43,0,0,0,0,44,45,46,44,47,45,46,44,47,44,44,46,47,44,44,44,44,47,47,44,44,46,46,44,47,45,46,44,47,46,47,45,46,44,47,46,45,44,45,44,46,46,44,47,46,44,45,46,44,47,45,46,44,47,45,46,44,47,46,0,0,0,0,48,49,50,48,51,49,50,48,51,50,48,50,48,50,51,48,48,48,48,51,48,48,50,50,48,51,49,50,48,51,50,51,49,50,48,51,50,49,48,49,48,50,50,48,51,50,50,48,49,50,48,51,49,50,48,51,49,50,48,51,50,52,0,0,0,0,0,0,0,0,0,0,0,53,54,55,56,57,58,59,60,61,52,53,54,55,56,57,58,59,60,61,52,57,60,52,57,60,52,53,52,54,53,60,56,61,52,54,55,57,54,55,54,59,56,52,61,56,57,58,59,60,61,52,52,53,54,55,56,57,58,59,60,61,52,60,53,52,52,56,53,53,54,55,56,57,58,59,60,61,52,56,60,61,60,56,52,53,57,60,60,53,52,60,53,53,54,53,57,56,57,53,57,57,60,52,52,53,57,57,53,54,55,56,57,58,59,60,61,52,53,54,55,56,57,58,59,60,61,52,53,54,55,56,57,58,59,60,61,52,62,0,0,0,0,0,0,0,0,0,0,63,0,0,64,64,64,0,65,0,0,0,0,65,66,0,66,0,0,0,0,0,67,64,0,63,68,0,0,0,0,63,68,63,68,67,0,67,0,0,0,0,65,0,0,69,0,0,0,0,69,0,70,71,72,63,73,72,74,75,76,65,68,77,78,70,62,79,80,81,66,82,83,84,85,86,87,88,69,89,90,67,91,92,93,91,63,73,72,74,75,76,65,68,77,78,70,62,79,80,81,66,82,83,84,85,86,87,88,69,89,90,67,91,92,86,87,87,72,76,65,77,78,70,62,79,80,81,66,82,84,85,86,87,67,92,72,76,65,77,78,70,62,79,80,81,66,82,84,85,86,87,67,92,62,89,89,89,64,86,87,64,86,87,85,76,62,84,85,86,87,71,72,70,73,75,89,73,75,89,64,86,87,94,64,86,87,76,77,78,70,92,91,92,62,69,85,89,89,63,73,76,65,68,77,78,70,62,62,79,80,81,66,82,83,84,85,86,87,88,89,90,91,92,63,73,72,74,75,76,76,65,68,77,78,70,62,62,79,80,81,81,66,82,83,84,85,86,87,88,69,89,90,67,91,92,66,89,62,64,86,87,89,66,89,62,95,82,64,86,87,89,64,84,85,86,87,63,73,72,74,75,76,65,68,77,78,70,62,79,80,81,66,82,83,84,85,86,87,88,69,89,90,67,91,92,90,79,81,82,88,83,89,89,79,88,66,74,66,76,85,64,86,87,89,71,72,72,74,62,73,84,89,91,90,62,76,83,62,96,77,78,79,66,77,78,79,81,84,89,97,70,70,80,89,89,89,97,70,70,80,85,64,86,87,89,89,87,88,77,64,86,87,94,89,92,91,92,89,76,81,72,76,65,77,78,70,62,79,80,81,66,82,84,85,86,87,67,92,62,70,70,80,64,86,87,83,86,87,64,64,63,73,72,74,75,76,65,68,77,78,70,62,79,80,81,66,82,83,84,85,86,87,88,69,69,89,90,67,91,92,63,73,72,74,75,76,65,68,77,78,70,62,79,80,81,66,82,83,84,85,86,87,88,69,89,90,67,91,92,63,73,72,74,75,76,65,68,77,78,70,62,79,80,81,66,82,83,84,85,86,87,88,69,89,90,67,91,92,77,78,79,72,72,89,98,99,100,101,102,103,104,105,105],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]]],[[["",0]],["mutexguard",6,[["backtrace",3]]]],[[["",0],["transactionid",3],["path",3],["anytreestate",8],["context",3],["option",4,[["transactionmanager",3]]]],["result",4,[["box",3,[["anytransactiontree",8]]],["error",3]]]],[[["",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["arcbytes",3]],[[["chunkcache",3]]],[[["",0]],["option",4,[["chunkcache",3]]]],[[["",0]],["arcbytes",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["chunkcache",3]],[[["",0]],["context",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["arcbytes",3]],["ordering",4]],[[],["result",4,[["error",3]]]],[[["",0]],["result",4,[["error",3]]]],[[["",0],["option",4],["option",4,[["arcbytes",3]]]],["result",4,[["compareandswaperror",4]]]],[[["",0],["option",4],["option",4,[["arcbytes",3]]]],["result",4,[["compareandswaperror",4]]]],[[["",0]],["context",3]],[[["",0]],["u64",0]],[[["",0]],["sequenceid",3]],[[["",0]],["result",4,[["vec",3,[["u8",0]]]]]],[[],["arcbytes",3]],[[]],[[],["context",3]],[[["asref",8,[["path",3]]]]],[[["",0]],["box",3,[["anytreestate",8]]]],[[["",0]],["result",4,[["bool",0],["error",3]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4,[["arcbytes",3]]]],[[["",0]]],[[["",0]],["result",4,[["vec",3,[["u8",0]]]]]],[[["",0]],["logentry",3]],[[["",0]],["logentry",3]],[[["",0]],["bool",0]],[[["",0],["arcbytes",3]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["filemanager",8]],["config",3,[["filemanager",8]]]],null,[[["",0]],["result",4,[["option",4],["error",3]]]],[[["",0]],["result",4,[["option",4],["error",3]]]],[[["",0]],["result",4,[["option",4,[["arcbytes",3]]],["error",3]]]],[[["",0]],["result",4,[["option",4,[["arcbytes",3]]],["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["bytes",3]],["arcbytes",3]],[[["str",0]],["arcbytes",3]],[[["cow",4]],["arcbytes",3]],[[["string",3]],["arcbytes",3]],[[]],[[["cowbytes",3]],["arcbytes",3]],[[],["arcbytes",3]],[[],["arcbytes",3]],[[],["arcbytes",3]],[[["vec",3,[["u8",0],["global",3]]]],["arcbytes",3]],[[]],[[]],[[]],[[]],[[]],[[["aborterror",4,[["infallible",4]]]]],[[["recverror",4]]],[[["str",0]]],[[["string",3]]],[[]],[[["error",3]]],[[["errorkind",4]]],[[["senderror",3]]],[[["str",0]]],[[["error",3]]],[[]],[[["string",3]]],[[["senderror",3]]],[[["recverror",4]]],[[]],[[["error",3]]],[[]],[[]],[[["error",3]]],[[]],[[]],[[]],[[]],[[["",0]],["result",4,[["option",4,[["arcbytes",3]]],["error",3]]]],[[["",0]],["result",4,[["option",4,[["arcbytes",3]]],["error",3]]]],[[["",0],["u64",0],["u64",0]],["option",4,[["cacheentry",4]]]],[[["",0],["",0]],["u64",0]],[[["",0]],["result",4,[["vec",3],["error",3]]]],[[["",0]],["result",4,[["vec",3],["error",3]]]],[[["",0],["",0]],["result",4,[["vec",3],["error",3]]]],[[["",0],["",0]],["result",4,[["vec",3],["error",3]]]],[[["",0],["",0]]],[[],["error",3]],[[["",0],["u64",0],["u64",0],["arcbytes",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["arcbytes",3]],[[],["vec",3,[["u8",0],["global",3]]]],null,[[["",0]],["iter",3]],null,[[["",0]],["result",4,[["option",4],["error",3]]]],[[["",0]],["result",4,[["option",4],["error",3]]]],[[["",0]],["result",4,[["option",4,[["arcbytes",3]]],["error",3]]]],[[["",0]],["result",4,[["option",4,[["arcbytes",3]]],["error",3]]]],[[["",0]],["lockedtransactiontree",3,[["root",8]]]],[[["",0],["vec",3,[["arcbytes",3]]],["operation",4,[["arcbytes",3]]]],["result",4,[["error",3]]]],[[["",0],["vec",3,[["arcbytes",3]]],["operation",4,[["arcbytes",3]]]],["result",4,[["error",3]]]],[[["",0]],["str",0]],[[["",0]],["str",0]],[[],["arcbytes",3]],[[["asref",8,[["path",3]]]]],[[["usize",0]]],[[["usize",0],["usize",0]]],[[],["result",4,[["roots",3],["error",3]]]],[[["vec",3,[["u8",0],["global",3]]]],["arcbytes",3]],[[["",0]],["option",4,[["ordering",4]]]],[[["",0]],["option",4,[["ordering",4]]]],[[["",0]],["option",4,[["ordering",4]]]],[[["",0],["arcbytes",3]],["option",4,[["ordering",4]]]],[[["",0]],["pathbuf",3]],[[["",0]],["path",3]],[[["",0]],["result",4,[["usize",0],["error",3]]]],[[["",0],["usize",0]],["result",4,[["arcbytes",3],["error",3]]]],[[["",0],["",0]],["result",4,[["error",3]]]],[[["",0],["",0]],["result",4,[["error",3]]]],[[["",0]],["result",4,[["option",4,[["arcbytes",3]]],["error",3]]]],[[["",0]],["result",4,[["option",4,[["arcbytes",3]]],["error",3]]]],[[["",0]],["result",4,[["option",4,[["arcbytes",3]]],["error",3]]]],[[["",0]],["result",4,[["option",4,[["arcbytes",3]]],["error",3]]]],[[["",0],["u64",0],["u64",0],["anysendsync",8]]],[[]],[[["",0],["",0],["bool",0]],["result",4,[["aborterror",4]]]],[[["",0],["",0],["bool",0]],["result",4,[["aborterror",4]]]],[[["",0],["bool",0],["",0],["",0]],["result",4,[["aborterror",4]]]],[[["",0]],["result",4]],[[["",0]],["result",4,[["error",3]]]],[[["",0]],["result",4,[["error",3]]]],[[["threadpool",3]]],[[["",0]],["arcbytes",3]],[[["",0]],["option",4,[["error",8]]]],[[["",0]],["option",4,[["error",8]]]],[[["",0]],["option",4,[["error",8]]]],[[["",0]],["option",4,[["error",8]]]],[[["usize",0]]],[[["",0]]],[[["",0]],["arcbytes",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],null,[[["",0]],["result",4,[["executingtransaction",3],["error",3]]]],[[["",0]],["transactionmanager",3]],null,[[["",0],["usize",0]],["option",4,[["lockedtransactiontree",3,[["root",8]]]]]],[[["",0],["treeroot",3,[["root",8]]]],["result",4,[["tree",3,[["root",8]]],["error",3]]]],[[["",0]],["result",4,[["vec",3,[["string",3]]],["error",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["usize",0]],["option",4,[["unlockedtransactiontree",3]]]],[[["anyvault",8]]],[[["",0]],["option",4,[["anyvault",8]]]],[[["arc",3,[["anyvault",8]]]]],[[["chunkcache",3]]],[[["vault",8]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["result",4,[["error",3]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["pathids",3]],[[["",0],["",0]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[["",0],["fnonce",8]]],[[],["pathids",3]],[[["",0]],["result",4,[["bool",0],["error",3]]]],[[["",0]],["result",4,[["error",3]]]],[[["",0],["fileop",8]]],[[["file",8]]],[[["",0]],["result",4,[["bool",0],["error",3]]]],[[["",0]],["result",4,[["u64",0],["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],null,[[["",0]],["option",4,[["u64",0]]]],[[["",0]],["option",4,[["u64",0]]]],[[]],[[]],[[["",0]],["result",4,[["u64",0],["error",3]]]],null,null,[[["",0],["option",4,[["u64",0]]]],["result",4,[["error",3]]]],[[["",0],["option",4,[["u64",0]]]],["result",4,[["error",3]]]],[[["",0]],["path",3]],null,[[["",0]],["result",4,[["error",3]]]],[[["fnonce",8]],["result",4,[["error",3]]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,[[["",0]],["result",4,[["error",3]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["anyfilemanager",4]],[[["",0],["",0]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[["",0],["fnonce",8]]],[[]],[[["",0]],["result",4,[["bool",0],["error",3]]]],[[["",0]],["result",4,[["error",3]]]],[[["",0],["fileop",8]]],[[["",0]],["result",4,[["bool",0],["error",3]]]],[[["",0]],["result",4,[["u64",0],["error",3]]]],[[["",0]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["",0]],["option",4,[["u64",0]]]],[[["",0]],["option",4,[["u64",0]]]],[[]],[[]],[[]],[[["",0]],["result",4,[["u64",0],["error",3]]]],[[]],[[["",0],["option",4,[["u64",0]]]],["result",4,[["anyfile",4],["error",3]]]],[[["",0],["option",4,[["u64",0]]]],["result",4,[["anyfile",4],["error",3]]]],[[["",0]],["path",3]],[[["",0]],["result",6,[["usize",0]]]],[[["",0]],["result",4,[["error",3]]]],[[["anyfile",4],["fnonce",8]],["result",4,[["error",3]]]],[[["",0],["seekfrom",4]],["result",6,[["u64",0]]]],[[]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["result",6,[["usize",0]]]],null,null,null,null,null,null,null,null,null,null,[[["",0]],["result",4,[["error",3]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["stdfilemanager",3]],[[["",0],["",0]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[["",0],["fnonce",8]]],[[],["stdfilemanager",3]],[[["",0]],["result",4,[["bool",0],["error",3]]]],[[["",0]],["result",4,[["error",3]]]],[[["",0]]],[[["",0],["fileop",8]]],[[["",0]],["result",4,[["bool",0],["error",3]]]],[[["",0]],["result",4,[["u64",0],["error",3]]]],[[["",0]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["",0]],["option",4,[["u64",0]]]],[[["",0]],["option",4,[["u64",0]]]],[[]],[[]],[[]],[[]],[[["",0]],["result",4,[["u64",0],["error",3]]]],[[["",0],["option",4,[["u64",0]]]],["result",4,[["stdfile",3],["error",3]]]],[[["",0],["option",4,[["u64",0]]]],["result",4,[["stdfile",3],["error",3]]]],[[["",0],["option",4,[["u64",0]]]],["result",4,[["stdfile",3],["error",3]]]],[[["",0],["option",4,[["u64",0]]]],["result",4,[["stdfile",3],["error",3]]]],[[["",0]],["path",3]],[[["",0]],["result",6,[["usize",0]]]],[[["",0]],["result",4,[["error",3]]]],[[["stdfile",3],["stdfilemanager",3],["fnonce",8]],["result",4,[["error",3]]]],[[["",0],["seekfrom",4]],["result",6,[["u64",0]]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["result",6,[["usize",0]]]],null,null,null,null,[[["",0]],["result",4,[["error",3]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["memoryfile",3]],[[["",0]],["memoryfilemanager",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[["",0],["fnonce",8]]],[[],["memoryfilemanager",3]],[[["",0]],["result",4,[["bool",0],["error",3]]]],[[["",0]],["result",4,[["error",3]]]],[[["",0],["fileop",8]]],[[["",0]],["result",4,[["bool",0],["error",3]]]],[[["",0]],["result",4,[["u64",0],["error",3]]]],[[["",0]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["",0]],["option",4,[["u64",0]]]],[[["",0]],["option",4,[["u64",0]]]],[[]],[[]],[[]],[[]],[[["",0]],["result",4,[["u64",0],["error",3]]]],[[["",0],["option",4,[["u64",0]]]],["result",4,[["memoryfile",3],["error",3]]]],[[["",0],["option",4,[["u64",0]]]],["result",4,[["memoryfile",3],["error",3]]]],[[["",0],["option",4,[["u64",0]]]],["result",4,[["memoryfile",3],["error",3]]]],[[["",0],["option",4,[["u64",0]]]],["result",4,[["memoryfile",3],["error",3]]]],[[["",0]],["path",3]],[[["",0]],["result",6,[["usize",0]]]],[[["",0]],["result",4,[["error",3]]]],[[["memoryfile",3],["memoryfilemanager",3],["fnonce",8]],["result",4,[["error",3]]]],[[["",0],["seekfrom",4]],["result",6,[["u64",0]]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["result",6,[["usize",0]]]],null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["transactionmanager",3]],[[["",0]],["state",3]],[[["",0]],["transactionid",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["result",4,[["error",3]]]],[[["",0],["transactionid",3]],["ordering",4]],[[],["result",4,[["treelocks",6],["error",3]]]],[[["",0]],["transactionid",3]],[[["",0]],["option",4,[["transactionid",3]]]],[[["",0]],["option",4,[["arcbytes",3]]]],[[]],[[],["transactionid",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0],["logentry",3]],["bool",0]],[[["",0],["transactionid",3]],["bool",0]],null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0],["transactionid",3]],["result",4,[["option",4,[["logentry",3]]],["error",3]]]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]]],null,[[["state",3],["context",3]],["result",4,[["error",3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["logentry",3]],[[["",0]],["bool",0]],null,[[["",0]],["u64",0]],[[["",0],["logentry",3]],["bool",0]],[[["",0],["transactionid",3]],["bool",0]],[[["",0],["intoiterator",8]],["transactionhandle",3]],[[["",0],["intoiterator",8]],["managedtransaction",3]],[[["",0],["intoiterator",8]],["transactionhandle",3]],[[["",0]],["transactionid",3]],[[["path",3],["state",3],["context",3]],["result",4,[["error",3]]]],[[["",0],["transactionid",3]],["option",4,[["ordering",4]]]],[[["",0]],["path",3]],[[["",0],["vec",3,[["logentry",3]]]],["result",4,[["error",3]]]],[[["path",3],["state",3],["context",3]],["result",4,[["error",3]]]],[[]],[[["",0],["fnmut",8]],["result",4,[["error",3]]]],[[["",0],["fnmut",8]],["result",4,[["error",3]]]],[[["",0]],["result",4,[["error",3]]]],[[["path",3],["context",3]],["result",4,[["error",3]]]],[[["",0]],["state",3]],[[["",0]],["state",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["u64",0]],[[["",0],["transactionid",3]],["result",4,[["option",4,[["u64",0]]],["error",3]]]],[[["",0],["transactionid",3]],["result",4,[["bool",0],["error",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0],["transactionid",3],["path",3],["anytreestate",8],["context",3],["option",4,[["transactionmanager",3]]]],["result",4,[["box",3,[["anytransactiontree",8]]],["error",3]]]],[[["",0],["transactionid",3],["path",3],["anytreestate",8],["context",3],["option",4,[["transactionmanager",3]]]],["result",4,[["box",3,[["anytransactiontree",8]]],["errorborrowedrange",3]],[[["",0]],["borrowedrangenull,null,null,[[["",0]]],[[["",0]],["btreeentry",3]],[[["",0]],["btreenode",4]],[[["",0]],["versionedbyidindex",3]],[[["",0]],["unversionedbyidindex",3]],[[["",0]],["byidstats",3]],[[["",0]],["sequenceid",3]],[[["",0]],["bysequenceindex",3]],[[["",0]],["bysequencestats",3]],[[["",0]],["interior",3]],[[["",0]],["pointer",4]],[[["",0]],["keyentry",3]],[[["",0]],["state",3]],[[["",0]],["activestate",3]],[[["",0]],["unversionedtreeroot",3]],[[["",0]],["versionedtreeroot",3]],[[["",0]],["scanevaluation",4]],[[["",0]],["borrowedrange",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["sequenceid",3]],["ordering",4]],[[["",0]],["result",4,[["error",3]]]],[[["option",4,[["transactablecompaction",3]]]],["result",4,[["error",3]]]],[[["",0],["option",4],["option",4,[["arcbytes",3]]],["option",4,[["transactionid",3]]]],["result",4,[["compareandswaperror",4]]]],[[["",0],["bool",0],["file",8],["hashmap",3],["pagedwriter",3],["option",4,[["anyvault",8]]]],["result",4,[["error",3]]]],[[["",0],["bool",0],["file",8],["hashmap",3],["pagedwriter",3],["option",4,[["anyvault",8]]]],["result",4,[["error",3]]]],[[["",0],["bool",0],["file",8],["hashmap",3],["pagedwriter",3],["option",4,[["anyvault",8]]]],["result",4,[["error",3]]]],[[["",0]],["u64",0]],[[["",0]],["u64",0]],[[["",0]],["u64",0]],null,[[]],[[],["sequenceid",3]],[[],["state",3]],[[],["activestate",3]],[[]],[[]],[[["",0]],["box",3,[["anytreestate",8]]]],[[["",0]],["box",3,[["anytreestate",8]]]],null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["arcbytes",3]],["result",4,[["error",3]]]],[[["arcbytes",3]],["result",4,[["error",3]]]],[[["arcbytes",3]],["result",4,[["error",3]]]],[[["",0]],["result",4,[["error",3]]]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],null,null,null,null,null,[[["",0]],["bound",4,[["u64",0]]]],[[["",0]],["bound",4]],[[["",0],["sequenceid",3]],["bool",0]],[[["",0],["pageheader",4]],["bool",0]],null,[[["",0],["bool",0]],["result",4,[["option",4],["error",3]]]],[[["",0],["bool",0]],["result",4,[["option",4,[["arcbytes",3]]],["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["btreenode",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u64",0]]],[[]],[[]],[[]],[[["btreeentry",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["option",4,[["btreeentry",3]]]],[[["",0],["bool",0]],["result",4,[["option",4,[["arcbytes",3]]],["error",3]]]],[[["",0],["",0]],["u64",0]],[[["",0],["",0],["",0],["",0],["file",8],["option",4,[["anyvault",8]]],["option",4,[["chunkcache",3]]]],["result",4,[["error",3]]]],[[["",0],["",0],["",0],["",0],["file",8],["option",4,[["anyvault",8]]],["option",4,[["chunkcache",3]]]],["result",4,[["error",3]]]],[[["",0],["",0],["",0],["",0],["file",8],["option",4,[["anyvault",8]]],["option",4,[["chunkcache",3]]]],["result",4,[["error",3]]]],[[["",0],["bool",0]],["result",4,[["vec",3],["error",3]]]],[[["",0]],["option",4,[["btreeentry",3]]]],[[["",0],["",0],["bool",0]],["result",4,[["vec",3],["error",3]]]],[[["",0],["",0]]],[[["arcbytes",3],["option",4,[["arcbytes",3]]]]],null,[[["",0]]],[[["",0]]],[[["",0]]],[[["state",3],["path",3],["option",4,[["u64",0]]],["context",3],["option",4,[["transactionmanager",3]]]],["result",4,[["error",3]]]],[[["",0]],["bool",0]],[[["option",4,[["u64",0]]],["option",4,[["usize",0]]]]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,[[["",0],["bool",0]],["result",4,[["option",4],["error",3]]]],[[["",0],["bool",0]],["result",4,[["option",4,[["arcbytes",3]]],["error",3]]]],null,null,[[["",0],["file",8],["bool",0],["option",4,[["anyvault",8]]],["option",4,[["chunkcache",3]]],["option",4,[["usize",0]]]],["result",4,[["error",3]]]],null,[[["",0],["file",8],["option",4,[["anyvault",8]]],["option",4,[["chunkcache",3]]],["option",4,[["usize",0]]],["fnonce",8]],["result",4,[["aborterror",4,[["",26,[["display",8],["debug",8]]]]]]]],[[["",0]],["arcbytes",3]],null,[[["",0],["modification",3,[["arcbytes",3]]],["pagedwriter",3],["option",4,[["usize",0]]]],["result",4,[["error",3]]]],[[["",0],["modification",3,[["arcbytes",3]]],["pagedwriter",3],["option",4,[["usize",0]]]],["result",4,[["error",3]]]],[[["",0],["modification",3,[["arcbytes",3]]],["pagedwriter",3],["option",4,[["usize",0]]]],["result",4,[["error",3]]]],[[["",0],["modification",3,[["arcbytes",3]]]],["result",4,[["error",3]]]],[[["",0]],["str",0]],[[["",0]],["str",0]],null,null,[[["",0],["sequenceid",3]],["bool",0]],[[["",0]]],[[["option",4,[["u64",0]]],["option",4,[["usize",0]]]]],[[["state",3],["option",4,[["arc",3,[["anyvault",8]]]]],["option",4,[["chunkcache",3]]]],["result",4,[["error",3]]]],[[["rangebounds",8,[["",26,[["clone",8],["into",8,[["u64",0]]]]]]]]],[[["",0]],["option",4]],[[["",0]],["option",4]],null,null,[[["",0],["sequenceid",3]],["option",4,[["ordering",4]]]],[[["",0]],["u64",0]],[[["",0]],["u64",0]],[[["",0]],["u64",0]],[[["",0]],["u64",0]],[[["",0]],["option",4,[["u64",0]]]],null,null,null,null,[[["",0]],["arc",3,[["activestate",3]]]],[[["state",3],["context",3],["option",4,[["transactionmanager",3]]]],["result",4,[["error",3]]]],[[]],[[]],[[]],[[]],[[["",0],["",0],["bool",0]],["result",4,[["error",3]]]],[[["",0],["option",4,[["transactionid",3]]]],["result",4,[["option",4,[["arcbytes",3]]],["error",3]]]],[[["",0],["option",4,[["transactionid",3]]]],["result",4,[["option",4,[["arcbytes",3]]],["error",3]]]],[[]],[[["",26,[["intoiterator",8],["exactsizeiterator",8]]]]],[[]],[[]],null,[[["",0],["",0],["scanargs",3],["file",8],["option",4,[["anyvault",8]]],["option",4,[["chunkcache",3]]]],["result",4,[["bool",0],["aborterror",4,[["",26,[["display",8],["debug",8]]]]]]]],[[["",0],["",0],["scanargs",3],["file",8],["option",4,[["anyvault",8]]],["option",4,[["chunkcache",3]]]],["result",4,[["bool",0],["aborterror",4,[["",26,[["display",8],["debug",8]]]]]]]],[[["",0],["",0],["scanargs",3],["file",8],["option",4,[["anyvault",8]]],["option",4,[["chunkcache",3]]]],["result",4,[["bool",0],["aborterror",4,[["",26,[["display",8],["debug",8]]]]]]]],[[["",0],["",0],["bool",0],["bool",0],["",0],["",0],["",0]],["result",4,[["aborterror",4]]]],[[["",0],["bool",0],["bool",0],["",0],["",0]],["result",4,[["aborterror",4]]]],null,null,null,[[["",0],["pagedwriter",3],["vec",3]],["result",4,[["error",3]]]],[[["",0],["pagedwriter",3],["vec",3]],["result",4,[["error",3]]]],[[["",0],["pagedwriter",3],["vec",3]],["result",4,[["error",3]]]],[[["",0],["",0]],["result",4,[["usize",0],["error",3]]]],[[["",0],["option",4,[["transactionid",3]]]],["result",4,[["error",3]]]],null,[[["",0]],["bound",4,[["u64",0]]]],[[["",0]],["bound",4]],null,[[["",0]]],null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],null,[[["",0]],["u64",0]],null,[[["",0]],["transactionid",3]],[[["",0]],["transactionid",3]],[[["",0]],["transactionid",3]],null,null,null,[[],["treeroot",3,[["managedfile",8]]]],[[],["treeroot",3,[["managedfile",8]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["u8",0]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,[[["vault",8]]],[[["state",3],["context",3],["option",4,[["transactionmanager",3]]]],["result",4,[["error",3]]]],null,null,null,null,null,null,null,null,null],"p":[[4,"CompareAndSwapError"],[4,"ErrorKind"],[8,"Vault"],[4,"AbortError"],[3,"ArcBytes"],[3,"Error"],[3,"Tree"],[3,"ExecutingTransaction"],[3,"UnlockedTransactionTree"],[3,"LockedTransactionTree"],[3,"TransactionTree"],[3,"Roots"],[3,"Config"],[3,"ThreadPool"],[3,"ChunkCache"],[3,"Context"],[13,"Other"],[13,"Nebari"],[13,"Conflict"],[13,"Error"],[13,"Message"],[13,"Io"],[13,"DataIntegrity"],[13,"Internal"],[13,"Vault"],[8,"FileManager"],[8,"ManagedFile"],[3,"RecreatedFile"],[3,"PathIds"],[8,"File"],[8,"OpenableFile"],[8,"OperableFile"],[8,"FileOp"],[8,"ManagedFileOpener"],[4,"AnyFile"],[4,"AnyFileManager"],[4,"AnyFileHandle"],[13,"Std"],[13,"Memory"],[13,"Std"],[13,"Memory"],[13,"Std"],[13,"Memory"],[3,"StdFileManager"],[3,"StdFileOpener"],[3,"StdFile"],[3,"OpenStdFile"],[3,"MemoryFileManager"],[3,"MemoryFileOpener"],[3,"MemoryFile"],[3,"OpenMemoryFile"],[3,"TransactionId"],[3,"TransactionLog"],[3,"ManagedTransaction"],[3,"TransactionHandle"],[3,"LogEntry"],[3,"TransactionManager"],[3,"TreeLock"],[3,"TreeLockHandle"],[3,"State"],[3,"LogPosition"],[3,"SequenceId"],[4,"Operation"],[8,"Root"],[4,"BTreeNode"],[4,"Pointer"],[4,"ScanEvaluation"],[4,"KeyOperation"],[4,"PageHeader"],[3,"ByIdStats"],[8,"AnyTreeRoot"],[3,"TreeRoot"],[3,"CompareSwap"],[3,"TransactableCompaction"],[3,"PagedWriter"],[3,"BTreeEntry"],[3,"VersionedByIdIndex"],[3,"UnversionedByIdIndex"],[3,"BySequenceIndex"],[3,"BySequenceStats"],[3,"Interior"],[3,"KeyEntry"],[3,"Modification"],[3,"State"],[3,"ActiveState"],[3,"UnversionedTreeRoot"],[3,"VersionedTreeRoot"],[3,"KeySequence"],[3,"TreeFile"],[3,"KeyRange"],[3,"U64Range"],[3,"BorrowedRange"],[8,"BorrowByteRange"],[8,"Serializable"],[8,"EmbeddedIndex"],[8,"ValueIndex"],[8,"Reducer"],[13,"Leaf"],[13,"Interior"],[13,"Set"],[13,"Set"],[13,"SetEach"],[13,"CompareSwap"],[13,"OnDisk"],[13,"Loaded"]]},\
"xtask":{"doc":"","t":[4,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,12],"n":["Commands","Config","GenerateBenchmarkOverview","Tools","args","augment_subcommands","augment_subcommands_for_update","borrow","borrow","borrow_mut","borrow_mut","cargo_args","deref","deref","deref_mut","deref_mut","drop","drop","fmt","from","from","from_arg_matches","generate_benchmark_overview","has_subcommand","init","init","into","into","into_app","into_app_for_update","main","paths","try_from","try_from","try_into","try_into","type_id","type_id","update_from_arg_matches","0"],"q":["xtask","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","xtask::Commands"],"d":["","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","",""],"i":[0,0,1,1,2,1,1,2,1,2,1,2,2,1,2,1,2,1,1,2,1,1,0,1,2,1,2,1,1,1,0,2,2,1,2,1,2,1,1,3],"f":[null,null,null,null,[[],["vec",3,[["string",3]]]],[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["vec",3,[["string",3]]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["argmatches",3]],["result",4,[["error",3]]]],[[],["result",6]],[[["str",0]],["bool",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[],["command",6]],[[],["command",6]],[[],["result",6]],[[],["vec",3,[["string",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],null],"p":[[4,"Commands"],[4,"Config"],[13,"Tools"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};