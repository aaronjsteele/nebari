var searchIndex = JSON.parse('{\
"benchmarks":{"doc":"This page has been left intentionally blank.","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"nebari":{"doc":"Transactional append-only B-Tree storage for <code>BonsaiDb</code>.","t":[4,3,3,4,3,13,3,13,4,13,3,16,16,8,13,13,13,13,13,8,16,13,13,3,13,3,3,3,3,3,8,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,10,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,3,13,6,13,4,4,4,3,13,4,3,13,13,13,8,13,13,13,13,13,13,3,13,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,12,11,11,10,11,11,11,10,11,11,12,11,11,11,10,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["AbortError","Buffer","ChunkCache","CompareAndSwapError","Config","Conflict","Context","DataIntegrity","Error","Error","ExecutingTransaction","File","FileHandle","FileManager","IdTooLarge","Internal","Io","KeyTooLarge","KeysNotOrdered","ManagedFile","Manager","Message","Other","Roots","Roots","StdFile","TransactionLog","TransactionManager","TransactionTree","Tree","Vault","append","as_slice","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cache","cache","cache","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","close","close","close","cmp","commit","compare_and_swap","compare_and_swap","context","current_sequence_id","current_transaction_id","decrypt","delete","delete_tree","deref","deref","drop","encrypt","eq","exists","exists","file_length","file_length","file_manager","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get","get","get","get","get_multiple","get_multiple","get_range","get_range","id","id","infallible","initialize_state","insert","into","into","into","into","into","into","into","into","into","into","into","into","into","into","last","last","last_key","last_key","name","new","new","new_transaction","open","open","open_for_append","open_for_append","open_for_read","open_for_read","partial_cmp","path","path","push","push","read","read","read","read_bytes","remove","remove","replace","replace_with_decoded","scan","scan","seek","set","set","source","source","source","spawn","state","state","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","total_size","transaction","transaction_was_successful","transactions","tree","tree","tree","tree_names","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vault","vault","vault","write","CompareSwap","CompareSwap","CompareSwapFn","Empty","KeyEvaluation","KeyOperation","KeyRange","Modification","Multiple","Operation","PagedWriter","ReadData","Remove","Remove","Root","Set","Set","SetEach","Single","Skip","Skip","State","Stop","TreeFile","TreeRoot","UnversionedTreeRoot","VersionedTreeRoot","begin_transaction","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","commit","default","default","default","default_state","deref","deref","deref_mut","deref_mut","deserialize","deserialize","deserialize","dirty","dirty","dirty","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","get","get_multiple","get_multiple","get_multiple","get_multiple","get_range","initialize_default","initialize_default","initialize_default","initialize_state","initialized","initialized","initialized","initialized","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","keys","modify","modify","modify","modify","name","new","new","next","operation","push","read","scan","scan","scan","scan","serialize","serialize","serialize","state","to_owned","to_owned","to_owned","transaction_id","transaction_id","transaction_id","transaction_id","tree","tree","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write"],"q":["nebarinebari::treed":["An error that could come from user code or Roots.","A wrapper around a <code>Cow<\'a, [u8]></code> wrapper that implements …","A configurable cache that operates at the “chunk” …","An error returned from <code>compare_and_swap()</code>.","A database configuration used to open a database.","The stored value did not match the conditional value.","A shared environment for database operations.","An unrecoverable data integrity error was encountered.","An error from <code>Roots</code>.","Another error occurred while executing the operation.","An executing transaction. While this exists, no other …","The <code>ManagedFile</code> that this manager is for.","A file handle type, which can have operations executed …","A manager that is responsible for controlling write …","A document ID was too many bytes.","An internal error occurred. These errors are not intended …","An error occurred while performing IO.","A key was too large.","A multi-key operation did not have its keys ordered.","A file that can be interacted with using async operations.","The file manager that synchronizes file access across …","An error has occurred. The string contains human-readable …","An error unrelated to Roots occurred.","A multi-tree transactional B-Tree database.","An error from Roots occurred.","An open file that uses <code>std::fs</code>.","A transaction log that records changes for one or more …","A shared <code>TransactionLog</code> manager. Allows multiple threads …","A tree that is modifiable during a transaction.","A named collection of keys and values.","A provider of encryption for blocks of data.","Returns a file handle that can be used to read and write.","Returns this buffer as a slice.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sets the chunk cache to use for this database.","Returns the context’s chunk cache.","The optional chunk cache to use.","","","","","","","","","","","Safely closes the file after flushing any pending …","Closes the transaction log.","","","Commits the transaction. Once this function has returned, …","Compares the value of <code>key</code> against <code>old</code>. If the values …","Compares the value of <code>key</code> against <code>old</code>. If the values …","Returns the vault used to encrypt this database.","Returns the latest sequence id.","Returns the current transaction id.","Decrypts a previously encrypted <code>payload</code>, returning the …","Check if the file exists.","Removes a tree. Returns true if a tree was deleted.","","","","Encrypts <code>payload</code>, returning a new buffer that contains …","","Check if the file exists.","Check if the file exists.","Returns the length of the file.","Returns the length of the file.","The file manager for the <code>ManagedFile</code> implementor.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the current value of <code>key</code>. This will return …","Retrieves the current value of <code>key</code>, if present. Does not …","Logs one or more transactions. After this call returns, …","Looks up a previously read chunk for <code>file_path</code> at <code>position</code>…","Retrieves the values of <code>keys</code>. If any keys are not found, …","Retrieves the values of <code>keys</code>. If any keys are not found, …","Retrieves all of the values of keys within <code>range</code>.","Retrieves all of the values of keys within <code>range</code>.","Returns the unique ID of this file. Only unique within …","","Unwraps the error contained within an infallible abort …","Initializes <code>state</code> to contain the information about the …","Adds a new cached chunk for <code>file_path</code> at <code>position</code>.","","","","","","","","","","","","","","","Returns the last key and value of the tree.","Returns the last key and value of the tree.","Returns the last  of the tree.","Returns the last key of the tree.","Returns the name of the tree.","Creates a new config to open a database located at <code>path</code>.","Create a new cache with a maximum number of entries (…","Begins a new transaction, exclusively locking <code>trees</code>.","Opens a transaction log for writing.","Opens the database, or creates one if the target path …","Opens or creates a file at <code>path</code>, positioning the cursor …","","Opens a file at <code>path</code> with read-only permission.","","","Returns the path to the file for this tree.","Returns the path to the database directory.","Logs one or more transactions. After this call returns, …","Push <code>transaction</code> to the log. Once this function returns, …","Returns a file handle that can be used for reading …","","","Reads <code>count</code> bytes from the front of the buffer, returning …","Removes <code>key</code> and returns the existing value, if present.","Removes <code>key</code> and returns the existing value, if present. …","Sets <code>key</code> to <code>value</code>. If a value already exists, it will be …","Adds a new cached chunk for <code>file_path</code> at <code>position</code>.","Scans the tree. Each key that is contained <code>range</code> will be …","Scans the tree. Each key that is contained <code>range</code> will be …","","Sets <code>key</code> to <code>value</code>.","Sets <code>key</code> to <code>value</code>. This is executed within its own …","","","","Spawns a new transaction manager. The transaction manager …","Returns the current state of the log.","Returns the current state of the transaction log.","","","","Converts this buffer into its slice and returns a …","","","","","","Returns the total size of the transaction log file.","Begins a transaction over <code>trees</code>. All trees will be …","Returns true if the transaction id was recorded in the …","Returns the transaction manager for this database.","Append-only B-Tree implementation","Accesses a locked tree.","Opens a tree named <code>name</code>.","Returns a list of all the names of trees contained in …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sets the vault to use for this database.","Returns the vault as a dynamic reference.","The optional vault in use.","","A wrapper for a <code>CompareSwapFn</code>.","Executes the <code>CompareSwap</code>. The original value (or <code>None</code> if …","A function that is allowed to check the current value of …","No keys.","The result of evaluating a key that was scanned.","An operation to perform on a key.","One or more keys.","A tree modification.","A list of keys.","An operation that is performed on a set of keys.","Writes data in pages, allowing for quick scanning through …","Read the data for this key.","Removes the keys.","Remove the key.","A B-Tree root implementation.","Sets all keys to the value.","Set the key to the new value.","Sets each key to the corresponding entry in this value. …","A single key.","Skip this key.","Do not alter the key.","The current state of a tree file. Must be initialized …","Stop scanning keys.","An append-only tree file.","A named tree root.","A versioned B-Tree root. This tree root internally uses …","A versioned B-Tree root. This tree root internally uses …","Begins a transaction.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Commits the tree. This is only needed if writes were done …","","","","Returns the default state for this root.","","","","","Deserializes the root from <code>bytes</code>.","","","Returns true if the root needs to be saved.","","","","","","","","","","","","","","","","","","","","","","","Gets the value stored for <code>key</code>.","Iterates over the tree looking for <code>keys</code>. <code>keys</code> must be …","Gets the value stored for <code>key</code>.","","","Gets the value stored for <code>key</code>.","Resets the state to the default, initialized state. After …","","","Attempts to load the last saved state of this tree into …","Returns true if the tree is initialized.","Returns an initialized state. This should only be used if …","","","","","","","","","","","","","","","","The keys to operate upon.","Modifies the tree.","Executes a modification.","","","Returns the name of the tree.","Returns a new wrapped callback.","Returns a tree as contained in <code>file</code>.","","The operation to perform on the keys.","Pushes a key/value pair. Replaces any previous value if …","Opens a tree file with read-only permissions.","Scans the tree over <code>range</code>. <code>args.key_evaluator</code> is invoked …","Gets the value stored for <code>key</code>.","","","Serialize the root and return the bytes. Writes any …","","","The state of the file.","","","","Returns the current transaction id.","","","The transaction ID to store with this change.","Returns a reference to a named tree that contains this …","Returns a reference to a named tree that contains this …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Opens a tree file with the ability to read and write."],"i":[0,0,0,0,0,1,0,2,0,1,0,3,3,0,2,2,2,2,2,0,4,2,5,0,5,0,0,0,0,0,0,3,6,7,8,9,10,11,2,12,1,13,5,14,6,15,16,7,8,9,10,11,2,12,1,13,5,14,6,15,16,13,16,16,12,14,6,15,16,12,14,6,15,16,4,10,11,6,7,8,9,12,8,10,17,3,12,14,6,7,17,6,3,3,3,3,16,11,11,2,2,12,1,1,13,5,5,14,6,15,16,7,8,9,10,11,2,2,2,2,2,2,12,1,1,13,5,5,14,6,6,6,6,6,6,15,16,8,9,10,15,8,9,8,9,4,11,5,10,15,7,8,9,10,11,2,12,1,13,5,14,6,15,16,8,9,8,9,9,13,15,10,10,13,4,11,4,11,6,9,12,10,14,3,11,6,6,8,9,8,15,8,9,11,8,9,2,1,5,14,10,14,12,14,6,6,15,16,2,1,5,10,12,14,12,0,7,12,12,7,8,9,10,11,2,12,1,13,5,14,6,15,16,7,8,9,10,11,2,12,1,13,5,14,6,15,16,7,8,9,10,11,2,12,1,13,5,14,6,15,16,13,16,16,11,0,18,0,19,0,0,0,0,19,0,0,20,18,21,0,18,21,18,19,20,21,0,20,0,0,0,0,22,18,23,22,24,20,25,21,26,27,28,29,19,18,23,22,24,20,25,21,26,27,28,29,19,27,28,29,27,28,29,24,27,28,29,22,23,25,23,25,30,28,29,30,28,29,18,23,21,26,27,28,29,19,18,23,22,24,20,25,21,26,27,28,29,19,24,30,24,28,29,24,30,28,29,24,30,27,28,29,18,23,22,24,20,25,21,26,27,28,29,19,19,26,30,24,28,29,22,23,24,19,26,24,24,30,24,28,29,30,28,29,24,27,28,29,30,28,29,26,30,30,18,23,22,24,20,25,21,26,27,28,29,19,18,23,22,24,20,25,21,26,27,28,29,19,18,23,22,24,20,25,21,26,27,28,29,19,24],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["error",4],["result",4,["error"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["chunkcache",3]]],[[],[["chunkcache",3],["option",4,["chunkcache"]]]],null,[[]],[[],["transactionmanager",3]],[[],["buffer",3]],[[],["chunkcache",3]],[[],["context",3]],[[]],[[]],[[]],[[]],[[]],[[],[["result",4,["error"]],["error",4]]],[[],[["result",4,["error"]],["error",4]]],[[],[["result",4,["error"]],["error",4]]],[[],["ordering",4]],[[],[["result",4,["error"]],["error",4]]],[[["buffer",3],["option",4,["buffer"]],["buffer",3],["option",4,["buffer"]]],[["result",4,["compareandswaperror"]],["compareandswaperror",4]]],[[["buffer",3],["option",4,["buffer"]],["buffer",3],["option",4,["buffer"]]],[["result",4,["compareandswaperror"]],["compareandswaperror",4]]],[[],["context",3]],[[],["u64",15]],[[],["u64",15]],[[],[["vec",3,["u8"]],["u8",15]]],[[],[["bool",15],["error",4],["result",4,["bool","error"]]]],[[],[["bool",15],["error",4],["result",4,["bool","error"]]]],[[]],[[]],[[]],[[],[["vec",3,["u8"]],["u8",15]]],[[["buffer",3]],["bool",15]],[[],[["bool",15],["error",4],["result",4,["bool","error"]]]],[[],[["bool",15],["error",4],["result",4,["bool","error"]]]],[[],[["u64",15],["result",4,["u64","error"]],["error",4]]],[[],[["u64",15],["result",4,["u64","error"]],["error",4]]],null,[[],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["str",15]]],[[["recverror",4]]],[[]],[[["senderror",3]]],[[["string",3]]],[[["error",3]]],[[]],[[["error",4]]],[[]],[[]],[[]],[[["error",4]]],[[]],[[]],[[]],[[["vec",3,["u8"]],["u8",15]]],[[]],[[["cow",4]]],[[]],[[]],[[]],[[],[["result",4,["option","error"]],["option",4,["buffer"]],["error",4]]],[[],[["result",4,["option","error"]],["option",4,["buffer"]],["error",4]]],[[["u64",15]],[["result",4,["option","error"]],["option",4,["logentry"]],["error",4]]],[[["u64",15]],[["cacheentry",4],["option",4,["cacheentry"]]]],[[],[["result",4,["vec","error"]],["error",4],["vec",3]]],[[],[["result",4,["vec","error"]],["error",4],["vec",3]]],[[["rangebounds",8,["buffer"]],["buffer",3],["debug",8]],[["result",4,["vec","error"]],["error",4],["vec",3]]],[[["rangebounds",8,["buffer"]],["buffer",3],["debug",8]],[["result",4,["vec","error"]],["error",4],["vec",3]]],[[],["u64",15]],[[],["u64",15]],[[],["error",4]],[[["state",3],["context",3]],[["result",4,["error"]],["error",4]]],[[["u64",15],["buffer",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["option",4],["error",4],["result",4,["option","error"]]]],[[],[["option",4],["error",4],["result",4,["option","error"]]]],[[],[["result",4,["option","error"]],["option",4,["buffer"]],["error",4]]],[[],[["result",4,["option","error"]],["option",4,["buffer"]],["error",4]]],[[],["str",15]],[[["path",3],["asref",8,["path"]]]],[[["usize",15]]],[[],["transactionhandle",3]],[[["context",3],["path",3],["state",3]],[["result",4,["error"]],["error",4]]],[[],[["result",4,["roots","error"]],["error",4],["roots",3]]],[[["u64",15]],[["result",4,["error"]],["error",4]]],[[["u64",15]],[["result",4,["error"]],["error",4]]],[[["u64",15]],[["result",4,["error"]],["error",4]]],[[["u64",15]],[["result",4,["error"]],["error",4]]],[[["buffer",3]],[["option",4,["ordering"]],["ordering",4]]],[[],["pathbuf",3]],[[],["path",3]],[[["logentry",3],["vec",3,["logentry"]]],[["result",4,["error"]],["error",4]]],[[["transactionhandle",3]],[["vec",3,["treelockhandle"]],["error",4],["result",4,["vec","error"]]]],[[],[["error",4],["result",4,["error"]]]],[[],[["usize",15],["result",6,["usize"]]]],[[],[["usize",15],["result",6,["usize"]]]],[[["usize",15]],[["result",4,["error"]],["error",3]]],[[],[["result",4,["option","error"]],["option",4,["buffer"]],["error",4]]],[[],[["result",4,["option","error"]],["option",4,["buffer"]],["error",4]]],[[],[["result",4,["option","error"]],["option",4,["buffer"]],["error",4]]],[[["u64",15],["anysendsync",8]]],[[["bool",15]],[["result",4,["aborterror"]],["aborterror",4]]],[[["bool",15]],[["result",4,["aborterror"]],["aborterror",4]]],[[["seekfrom",4]],[["result",6,["u64"]],["u64",15]]],[[],[["result",4,["error"]],["error",4]]],[[],[["result",4,["error"]],["error",4]]],[[],[["error",8],["option",4,["error"]]]],[[],[["error",8],["option",4,["error"]]]],[[],[["error",8],["option",4,["error"]]]],[[["path",3],["context",3]],[["result",4,["error"]],["error",4]]],[[],["state",3]],[[],["state",3]],[[]],[[]],[[]],[[],["buffer",3]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["u64",15]],[[],[["executingtransaction",3],["result",4,["executingtransaction","error"]],["error",4]]],[[["u64",15]],[["bool",15],["error",4],["result",4,["bool","error"]]]],[[],["transactionmanager",3]],null,[[["usize",15]],[["option",4,["transactiontree"]],["transactiontree",3]]],[[["cow",4,["str"]],["into",8,["cow"]]],[["result",4,["tree","error"]],["tree",3],["error",4]]],[[],[["vec",3,["string"]],["error",4],["result",4,["vec","error"]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["vault",8]]],[[],[["option",4,["vault"]],["vault",8]]],null,[[],[["usize",15],["result",6,["usize"]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["u64",15],["anytreestate",8],["transactionmanager",3],["path",3],["context",3],["option",4,["transactionmanager"]]],[["box",3,["anytransactiontree"]],["error",4],["result",4,["box","error"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["state",3]],[[],["unversionedtreeroot",3]],[[],["versionedtreeroot",3]],[[]],[[]],[[]],[[],[["result",4,["error"]],["error",4]]],[[],["state",3]],[[],["unversionedtreeroot",3]],[[],["versionedtreeroot",3]],[[],[["anytreestate",8],["box",3,["anytreestate"]]]],[[]],[[]],[[]],[[]],[[["buffer",3]],[["result",4,["error"]],["error",4]]],[[["buffer",3]],[["result",4,["error"]],["error",4]]],[[["buffer",3]],[["result",4,["error"]],["error",4]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["bool",15]],[["result",4,["option","error"]],["option",4,["buffer"]],["error",4]]],[[["option",4,["vault"]],["vault",8],["option",4,["chunkcache"]],["chunkcache",3],["keyrange",4]],[["result",4,["error"]],["error",4]]],[[["bool",15]],[["result",4,["vec","error"]],["error",4],["vec",3]]],[[["option",4,["vault"]],["vault",8],["option",4,["chunkcache"]],["chunkcache",3],["keyrange",4]],[["result",4,["error"]],["error",4]]],[[["option",4,["vault"]],["vault",8],["option",4,["chunkcache"]],["chunkcache",3],["keyrange",4]],[["result",4,["error"]],["error",4]]],[[["rangebounds",8,["buffer"]],["bool",15],["debug",8],["buffer",3]],[["result",4,["vec","error"]],["error",4],["vec",3]]],[[]],[[]],[[]],[[["state",3],["transactionmanager",3],["path",3],["context",3],["option",4,["transactionmanager"]]],[["result",4,["error"]],["error",4]]],[[],["bool",15]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["modification",3,["buffer"]],["pagedwriter",3],["buffer",3]],[["result",4,["error"]],["error",4]]],[[["modification",3,["buffer"]],["buffer",3]],[["result",4,["error"]],["error",4]]],[[["modification",3,["buffer"]],["pagedwriter",3],["buffer",3]],[["result",4,["error"]],["error",4]]],[[["modification",3,["buffer"]],["pagedwriter",3],["buffer",3]],[["result",4,["error"]],["error",4]]],[[],["str",15]],[[]],[[["option",4,["chunkcache"]],["option",4,["arc"]],["state",3],["chunkcache",3],["arc",3,["vault"]]],[["result",4,["error"]],["error",4]]],[[],["option",4]],null,[[["u64",15],["buffer",3]],[["result",4,["error"]],["error",4]]],[[["state",3],["transactionmanager",3],["option",4,["transactionmanager"]],["context",3]],[["result",4,["error"]],["error",4]]],[[["scanargs",3],["option",4,["vault"]],["vault",8],["option",4,["chunkcache"]],["chunkcache",3]],[["result",4,["aborterror"]],["aborterror",4]]],[[["bool",15]],[["result",4,["aborterror"]],["aborterror",4]]],[[["scanargs",3],["option",4,["vault"]],["vault",8],["option",4,["chunkcache"]],["chunkcache",3]],[["result",4,["aborterror"]],["aborterror",4]]],[[["scanargs",3],["option",4,["vault"]],["vault",8],["option",4,["chunkcache"]],["chunkcache",3]],[["result",4,["aborterror"]],["aborterror",4]]],[[["pagedwriter",3],["vec",3]],[["result",4,["error"]],["error",4]]],[[["pagedwriter",3],["vec",3]],[["result",4,["error"]],["error",4]]],[[["pagedwriter",3],["vec",3]],[["result",4,["error"]],["error",4]]],null,[[]],[[]],[[]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],null,[[],[["managedfile",8],["treeroot",3]]],[[],[["managedfile",8],["treeroot",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["state",3],["transactionmanager",3],["option",4,["transactionmanager"]],["context",3]],[["result",4,["error"]],["error",4]]]],"p":[[4,"CompareAndSwapError"],[4,"Error"],[8,"FileManager"],[8,"ManagedFile"],[4,"AbortError"],[3,"Buffer"],[3,"ExecutingTransaction"],[3,"TransactionTree"],[3,"Tree"],[3,"TransactionLog"],[3,"StdFile"],[3,"Roots"],[3,"Config"],[3,"TransactionManager"],[3,"ChunkCache"],[3,"Context"],[8,"Vault"],[4,"Operation"],[4,"KeyRange"],[4,"KeyEvaluation"],[4,"KeyOperation"],[3,"TreeRoot"],[3,"CompareSwap"],[3,"TreeFile"],[3,"PagedWriter"],[3,"Modification"],[3,"State"],[3,"UnversionedTreeRoot"],[3,"VersionedTreeRoot"],[8,"Root"]]},\
"xtask":{"doc":"","t":[4,3,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,5,11,11,11,11,11,11,12],"n":["Commands","CoverageConfig","GenerateBenchmarkOverview","GenerateCodeCoverageReport","borrow","borrow","borrow_mut","borrow_mut","clap","deref","deref","deref_mut","deref_mut","drop","drop","fmt","from","from","from_clap","generate_benchmark_overview","init","init","into","into","main","try_from","try_from","try_into","try_into","type_id","type_id","install_dependencies"],"q":["xtask","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","xtask::Commands"],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,1,2,1,2,1,1,2,1,2,1,2,1,1,2,1,1,0,2,1,2,1,0,2,1,2,1,2,1,3],"f":[null,null,null,null,[[]],[[]],[[]],[[]],[[],["app",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[]],[[["argmatches",3]]],[[],["result",6]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null],"p":[[4,"Commands"],[3,"CoverageConfig"],[13,"GenerateCodeCoverageReport"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};